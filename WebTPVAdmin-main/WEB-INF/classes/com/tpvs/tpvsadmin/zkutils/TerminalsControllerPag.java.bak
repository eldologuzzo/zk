package com.tpvs.tpvsadmin.zkutils;

import com.tpvs.tpvsadmin.db.Chains;
import com.tpvs.tpvsadmin.db.Departments;
import com.tpvs.tpvsadmin.db.Departmentsvariables;
import com.tpvs.tpvsadmin.db.Groups;
import com.tpvs.tpvsadmin.db.Reportemonitor;
import com.tpvs.tpvsadmin.db.Stores;
import com.tpvs.tpvsadmin.db.Terminals;
import com.tpvs.tpvsadmin.db.Terminalsvariables;
import com.tpvs.tpvsadmin.db.Tickets;
import com.tpvs.tpvsadmin.db.Users;
import com.tpvs.tpvsadmin.jpa.ChainsJpaController;
import com.tpvs.tpvsadmin.jpa.DepartmentsJpaController;
import com.tpvs.tpvsadmin.jpa.DepartmentsvariablesJpaController;
import com.tpvs.tpvsadmin.jpa.GroupsJpaController;
import com.tpvs.tpvsadmin.jpa.ReportemonitorJpaController;
import com.tpvs.tpvsadmin.jpa.StoresJpaController;
import com.tpvs.tpvsadmin.jpa.TerminalsJpaController;
import com.tpvs.tpvsadmin.jpa.TerminalsvariablesJpaController;
import com.tpvs.tpvsadmin.jpa.TicketsJpaController;
import com.tpvs.tpvsadmin.jpa.exceptions.IllegalOrphanException;
import com.tpvs.tpvsadmin.jpa.exceptions.NonexistentEntityException;
import com.tpvs.util.LogApp;
import com.tpvs.util.MyProperties;
import com.tpvs.util.TimeMeter;
import com.tpvs.util.chckTermFolio;
import com.tpvs.util.sendMyEmail;
import com.tpvs.util.someGralTools;
import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.rmi.activation.ActivationGroup;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.servlet.ServletContext;
import net.sf.dynamicreports.jasper.builder.export.JasperXlsxExporterBuilder;
import static net.sf.dynamicreports.report.builder.DynamicReports.cmp;
import static net.sf.dynamicreports.report.builder.DynamicReports.col;
import static net.sf.dynamicreports.report.builder.DynamicReports.export;
import static net.sf.dynamicreports.report.builder.DynamicReports.report;
import static net.sf.dynamicreports.report.builder.DynamicReports.stl;
import static net.sf.dynamicreports.report.builder.DynamicReports.type;
import net.sf.dynamicreports.report.builder.column.TextColumnBuilder;
import net.sf.dynamicreports.report.builder.style.StyleBuilder;
import net.sf.dynamicreports.report.constant.HorizontalAlignment;
import net.sf.dynamicreports.report.datasource.DRDataSource;
import net.sf.dynamicreports.report.exception.DRException;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.fill.JRFileVirtualizer;
import org.zkoss.util.resource.Labels;
import org.zkoss.zk.ui.Executions;
import org.zkoss.zk.ui.Sessions;
import org.zkoss.zk.ui.SuspendNotAllowedException;
import org.zkoss.zk.ui.event.Event;
import org.zkoss.zk.ui.event.EventListener;
import org.zkoss.zk.ui.util.GenericForwardComposer;
import org.zkoss.zul.Bandbox;
import org.zkoss.zul.Button;
import org.zkoss.zul.Combobox;
import org.zkoss.zul.Datebox;
import org.zkoss.zul.Div;
import org.zkoss.zul.Filedownload;
import org.zkoss.zul.Groupbox;
import org.zkoss.zul.Image;
import org.zkoss.zul.Intbox;
import org.zkoss.zul.Label;
import org.zkoss.zul.Listbox;
import org.zkoss.zul.Listcell;
import org.zkoss.zul.Listitem;
import org.zkoss.zul.Messagebox;
import org.zkoss.zul.Paging;
import org.zkoss.zul.Progressmeter;
import org.zkoss.zul.Textbox;
import org.zkoss.zul.Window;
import org.zkoss.zul.event.PagingEvent;

/**
 *
 * @author jstevetz, mikelara
 */
public class TerminalsControllerPag extends GenericForwardComposer {
    GroupsJpaController dao2 = new GroupsJpaController();
    ChainsJpaController dao3 = new ChainsJpaController();
    StoresJpaController dao4 = new StoresJpaController();
    DepartmentsJpaController dao5 = new DepartmentsJpaController();
    TerminalsJpaController dao = new TerminalsJpaController();
    Terminals current = new Terminals();
    Groups current2 = new Groups();
    Chains current3 = new Chains();
    Stores current4 = new Stores();
    Departments current5 = new Departments();
    Listbox box;
    Textbox textBoxQryTerminal;
    Textbox txtBoxAfiliacion, txtTerminalId;
    Button btnBuscarTerminal;
    Combobox comboboxGroups, comboboxChains;
//    Combobox comboboxStores;
    Image imgImgTerminalModel;
    // Bean Properties de interés para soportar GUI.
    Window win;
    Groupbox gb1;
    Div midiv;
    Label milabel;
    Intbox idDepartment;
    Textbox Department, contact, phone, textBoxBuscarStore;
    Paging pagTerminales;
    Button add, update, delete, variables, modVarsWithTemplate;
    Button addFolio, bttnLibFolio, bttnBuscarStore, bttnObtenerReporte, bttnLastReporte, bttnTermAltaMasiva;
    Textbox textBoxFolioTerminal, textBoxMerchantId;
    Bandbox bbStores;
    Listbox boxStores;
    Paging pagBoxDataStores;
    Progressmeter barraProgreso;
    Users mySessionUser = (Users)Sessions.getCurrent().getAttribute("mySessionUser");
    List<Groups> lstMyGroups = mySessionUser != null ? (mySessionUser.getGroupsList().size()>0?(new ArrayList<>(mySessionUser.getGroupsList())):dao2.findAllGroupsEntities(true, -1, -1, mySessionUser.getIdGroup()>0?mySessionUser.getIdGroup():-1, "")) : null;
    List<Chains> lstMyChains = null;
    List<Stores> lstMyStores = null;
    List<Departments> lstMyDepartments = null;
	LicenciasprecargadasJpaController daoLicencias = new LicenciasprecargadasJpaController();

    public Terminals getCurrent() {
        return current;
    }
    
    public void onCreate() {
        addPaginador();
        addPaginadorStores();
        List myLstPermisos = (List)Sessions.getCurrent().getAttribute("mySessionLstPermisos");
        add.setVisible(myLstPermisos.contains("bttnTermAdd"));
        update.setVisible(myLstPermisos.contains("bttnTermUpdate"));
        delete.setVisible(myLstPermisos.contains("bttnTermDelete"));
        modVarsWithTemplate.setVisible(myLstPermisos.contains("bttnTermVarsTmplt"));
        addFolio.setVisible(myLstPermisos.contains("bttnTermFolioAdd"));
        bttnLibFolio.setVisible(myLstPermisos.contains("bttnTermFolioRelease"));
        bttnObtenerReporte.setVisible(myLstPermisos.contains("bttnObtenerReporte"));
		if(mySessionUser.getPerfilUsuario().equalsIgnoreCase("prflAdminPerfilOper") || mySessionUser.getPerfilUsuario().equalsIgnoreCase("prflSupervisor")){
            bttnTermAltaMasiva.setDisabled(false);
        }
//        if(mySessionUser.getIdGroup()>0) {
//            Groups myGroup = lstMyGroups.get(0);
//            String stGroupName = myGroup.getGroupName();
//            String stRuta = Executions.getCurrent().getDesktop().getWebApp().getRealPath(File.separator + "varsTmpltTerminals" + stGroupName + ".zul");
//            if(!(new File(stRuta)).exists())
//                modVarsWithTemplate.setVisible(false);
//            else
//                modVarsWithTemplate.setVisible(true);
//        }
    }

    public void setCurrent(Terminals current) {
        this.current = current;
    }

    public Groups getCurrent2() {
        return current2;
    }

    public void setCurrent2(Groups current2) {
        this.current2 = current2;
    }

    public Chains getCurrent3() {
        return current3;
    }

    public void setCurrent3(Chains current3) {
        this.current3 = current3;
    }

    public Stores getCurrent4() {
        return current4;
    }

    public void setCurrent4(Stores current4) {
        this.current4 = current4;
    }

    public Departments getCurrent5() {
        return current5;
    }

    public void setCurrent5(Departments current5) {
        this.current5 = current5;
    }

//    public List getAllTerminals() {
//        System.out.println(" "+this.getClass().getName() );
//        System.out.println("  1.- .getAllTerminals current2.getIdGroup():" + current2.getIdGroup());
//        System.out.println("\n ..."+this.getClass().getName() + ".getAllTerminals current2.getIdGroup():" + current2.getIdGroup());
//        if(mySessionUser.getIdGroup()!=0)
//            current2.setIdGroup(mySessionUser.getIdGroup());
//
//        System.out.println("  2.- .getAllTerminals current2.getIdGroup():" + current2.getIdGroup());
//        if(current5.getIdDepartment() == null) {
//            if (current4.getIdStore() == null) {
//                if (current3.getIdChain() == null) {
//                    System.out.println("  3.- .getAllTerminals current2.getIdGroup():" + current2.getIdGroup());
//                    if (current2.getIdGroup() == null) {
//                        return dao.findTerminalsEntities();
//                        
//                        //-- MLA --
//                        ////System.out.println("  * Combos vacíos BUSCANDO Todas paginado...pagTerminales.getPageSize(): " + pagTerminales.getPageSize());
//                        ////box.setModel(new BindingListModelList(dao.findTerminalsEntities(pagTerminales.getPageSize(), 0), true));
//                        ////redraw(0, pagTerminales.getPageSize());
//                        ////return dao.findTerminalsEntities(pagTerminales.getPageSize(), 0);
//                    } else {
//                        return dao.findOnlyTerminalsForGroups(true, -1, -1, current2.getIdGroup());
//                    }
//                } else {
//                    return dao.findOnlyTerminalsForGroupsChains(true, -1, -1, current2.getIdGroup(), current3.getIdChain());
//                }
//            } else {
//                return dao.findOnlyTerminalsForGroupsChainsStores(true, -1, -1, current2.getIdGroup(), current3.getIdChain(), current4.getIdStore());
//            }
//        } else {
//            return dao.findOnlyTerminalsForGroupsChainsStoresDepartments(true, -1, -1, current2.getIdGroup(), current3.getIdChain(), current4.getIdStore(), current5.getIdDepartment());
//        }
//    }

    public List getAllGroups() {
        List<Groups> lstAllGroups = new ArrayList<>();
        if(mySessionUser.getIdGroup()==0 || lstMyGroups.size()>1) {
            lstAllGroups = new ArrayList<>(lstMyGroups);
            Groups gpoAll = new Groups();
            gpoAll.setGroupName(Labels.getLabel("lblTodos"));
            gpoAll.setContact(Labels.getLabel("lblTodosGrupos"));
            gpoAll.setIdGroup(null);
            lstAllGroups.add(0, gpoAll);
        } else {
            lstAllGroups.clear();
            for (Groups lstMyGroup : lstMyGroups) {
                if (lstMyGroup.getIdGroup().compareTo(mySessionUser.getIdGroup()) == 0) {
                    current2 = lstMyGroup;
                    break;
                }
            }
            lstAllGroups.add(current2);
        }
        return lstAllGroups;
    }

    public List getAllChains() {
        List lstAllChains = null;
        if(current2.getIdGroup() != null) {
            lstMyChains = dao3.findByIds(true, -1, -1, current2.getIdGroup(), Long.MIN_VALUE, "");
            lstAllChains = new ArrayList();
            for (Chains lstMyChain : lstMyChains) {
                if (lstMyChain.getIdGroup().getIdGroup().compareTo(current2.getIdGroup()) == 0) {
                    lstAllChains.add(lstMyChain);
                }
            }
        } 
        Chains chainAll = new Chains();
        chainAll.setChain(Labels.getLabel("lblTodos"));
        chainAll.setContact(Labels.getLabel("lblTodosCadenas"));
        chainAll.setIdChain(null);
        chainAll.setIdGroup(null);
        if(lstAllChains == null)
            lstAllChains = new ArrayList();
        lstAllChains.add(0, chainAll);
        current3 = chainAll;
        
        redrawActualStores();
        
        return lstAllChains;
    }

//    public List getAllStores() {
//        List lstAllStores = null;
//        if(current3.getIdChain() != null) {
//            lstMyStores = dao4.findByIds(true, -1, -1, current2.getIdGroup(), current3.getIdChain(), -1, "", "");
//            lstAllStores = new ArrayList();
//            for(int i=0; i<lstMyStores.size(); i++) {
//                if(((Stores)lstMyStores.get(i)).getIdChain().getIdChain().compareTo(current3.getIdChain())==0) {
//                    lstAllStores.add(lstMyStores.get(i));
//                }
//            }
//        } 
//        Stores storeAll = new Stores();
//        storeAll.setStore(Labels.getLabel("lblTodos"));
//        storeAll.setContact(Labels.getLabel("lblTodosTiendas"));
//        storeAll.setIdStore(null);
//        storeAll.setIdChain(null);
//        if (lstAllStores == null) {
//            lstAllStores = new ArrayList();
//        }
//        lstAllStores.add(0, storeAll);
//        current4 = storeAll;
//        return lstAllStores;
//    }

    public List getAllDepartments() {
        List lstAllDepartments = null;
        if(current4.getIdStore() != null) {
            lstMyDepartments = dao5.findByIds(true, -1, -1, mySessionUser.getGroupsList(), current3.getIdChain(), current4.getIdStore(), -1, 
                    "", "", "", mySessionUser.getIdProveedor()==null?0:mySessionUser.getIdProveedor().getIdProveedor());
            lstAllDepartments = new ArrayList();
            for (Departments lstMyDepartment : lstMyDepartments) {
                if (lstMyDepartment.getIdStore().getIdStore().compareTo(current4.getIdStore()) == 0) {
                    lstAllDepartments.add(lstMyDepartment);
                }
            }
        } 
        Departments departmentAll = new Departments();
        departmentAll.setDepartment(Labels.getLabel("lblTodos"));
        departmentAll.setContact(Labels.getLabel("lblTodosDeaprtamentos"));
        departmentAll.setIdDepartment(null);
        departmentAll.setIdStore(null);
        if (lstAllDepartments == null) {
            lstAllDepartments = new ArrayList();
        }
        lstAllDepartments.add(0, departmentAll);
        current5 = departmentAll;
        return lstAllDepartments;
    }
    
    public void onBlur$textBoxQryTerminal(Event event) {
        textBoxQryTerminal.setValue(textBoxQryTerminal.getValue().replaceAll("-", "").replaceAll(" ", ""));
    }

    public void onSelect$box(Event event) {
        if (box.getSelectedItem() != null) {
            imgImgTerminalModel.setSrc("images/modelosterminales/" + current.getModel().toLowerCase().trim() + ".jpg");
            modVarsWithTemplate.setDisabled(false);
            if(bttnLibFolio!=null) {
                if(current.getFolio()!=null && current.getModel().equalsIgnoreCase("Folio") && !current.getFolio().equals("0")) {
                    bttnLibFolio.setDisabled(true);
                } else {
                    bttnLibFolio.setDisabled(false);
                }
            }
            String stGroupName = current.getIdDepartment().getIdStore().getIdChain().getIdGroup().getGroupName();
            String stRuta = Executions.getCurrent().getDesktop().getWebApp().getRealPath(File.separator + "varsTmpltTerminals" + stGroupName + ".zul");
            if(!(new File(stRuta)).exists()) {
                modVarsWithTemplate.setVisible(false);
            } else {
                modVarsWithTemplate.setVisible(true);
            }
        }
    }
    
    public void onDoubleClick$box(Event event) {
        /*
            Sessions.getCurrent().setAttribute("terminalVarsTmplt", (Terminals)box.getSelectedItem().getValue());
            Window windowpopup = (Window) Executions.createComponents("/varsTmpltTerminals.zul", null, null);
            windowpopup.setMaximizable(true);
            try {
                windowpopup.doModal();
            } catch(SuspendNotAllowedException ex) {
                ex.printStackTrace();
            }
        */
        
        callTemplateVariables();
    }

    public void onClick$add(Event event) {
        if (current2.getIdGroup() == null || current3.getIdChain() == null || current4.getIdStore() == null || current5.getIdDepartment() == null) {
            alert("Debe seleccionar Grupo / Cadena / Tienda / Departamento");
            return;
        }
        voAlmacenarRamalSession();
        Sessions.getCurrent().setAttribute("operation", "add");
        Window windowpopup = (Window) Executions.createComponents(
//                "\\personal/cssoftech/proyectos/10-tpvsolutions/TPVSadmin/WebTPVAdmin/branches/gui/tpvsadmin/web" +
//                "http://localhost:8088/tpvsadmin" +
                "/terminalsPopUpPagDao.zul", null, null);
        windowpopup.setMaximizable(true);
        try {
            windowpopup.doModal();
        } catch(SuspendNotAllowedException ex) {
            ex.printStackTrace();
        }
        redrawActual();
    }

    public void onClick$update(Event event) {
        if(box.getSelectedCount()<=0) {
            alert("Debe seleccionar la terminal a editar primero");
            return;
        }
        voAlmacenarRamalSession();
        Sessions.getCurrent().setAttribute("operation", "update");
        Window windowpopup = (Window) Executions.createComponents("/terminalsPopUp.zul", null, null);
        windowpopup.setMaximizable(true);
        try {
            windowpopup.doModal();
        } catch(SuspendNotAllowedException ex) {
            ex.printStackTrace();
        }
        redrawActual();
    }

    public void onClick$delete() {
        if (box.getSelectedItem() != null) {
            try {
                dao.destroy(((Terminals) box.getSelectedItem().getValue()).getIdTerminal());
                
                com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerUsrActivity"), "INFO",
                        "El usuario " + ((Users)Sessions.getCurrent().getAttribute("mySessionUser")).getUserName() +
                                " eliminó la serie " + ((Terminals) box.getSelectedItem().getValue()).getIdTerminal() +
                                " con el folio " + ((Terminals)box.getSelectedItem().getValue()).getFolio());
                
                ReportemonitorJpaController daoRepMon = new ReportemonitorJpaController();
                List<Reportemonitor> lstRepMon = daoRepMon.findByIdTerminal(((Terminals) box.getSelectedItem().getValue()).getIdTerminal());
                if(lstRepMon!=null && !lstRepMon.isEmpty())
                    for(Reportemonitor myRepMon : lstRepMon) 
                        daoRepMon.destroy(myRepMon.getIdreportemonitor());
                
                new someGralTools().deleteDirectory(new File(com.tpvs.util.AppControlGeneral.stRutaApp +
                        MyProperties.getPropiedad("stDirToDwnldApps") + File.separator + ((Terminals) box.getSelectedItem().getValue()).getIdTerminal() + File.separator));
                
                com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerProcSist"), "INFO",
                        "Se limpió el directorio de descarga para la terminal .- " + ((Terminals) box.getSelectedItem().getValue()).getIdTerminal() +
                                " con el folio " + ((Terminals)box.getSelectedItem().getValue()).getFolio());
                
                alert("Se eliminó: " + ((Terminals) box.getSelectedItem().getValue()).getIdTerminal());
                
            } catch (NonexistentEntityException | IllegalOrphanException ex) {
                LogApp.addLogException(com.tpvs.util.MyProperties.getPropiedad("stLoggerProcSist"), "EXCEPTION", "Exception en borrado de terminal", ex);
                Logger.getLogger(Terminals.class.getName()).log(Level.SEVERE, null, ex);
                alert("No fue posible eliminar. msg.- " + ex.getMessage());
            }
        }
        redrawActual();
    }
    
    public void onClick$addFolio(Event event) {
        if (current2.getIdGroup() == null || current3.getIdChain() == null || current4.getIdStore() == null || current5.getIdDepartment() == null) {
            alert("Debe seleccionar Grupo / Cadena / Tienda / Departamento");
            return;
        }
        voAlmacenarRamalSession();
        Window windowpopup = (Window) Executions.createComponents("/terminalsFolioPopUp.zul", null, null);
        windowpopup.setMaximizable(true);
        try {
            windowpopup.doModal();
        } catch(SuspendNotAllowedException ex) {
            ex.printStackTrace();
        }
        redrawActual();
    }
    
    public void onClick$bttnLibFolio(Event event) {
        if(Boolean.parseBoolean(com.tpvs.util.MyProperties.getPropiedad("boCheckTickets" + com.tpvs.util.MyProperties.getPropiedad("stTypeSrv")))) {
            int inDiasTicket = com.tpvs.util.MyProperties.getIntPropiedad("inDiasTickets" + com.tpvs.util.MyProperties.getPropiedad("stTypeSrv"));
            
            if(inDiasTicket < 0) {
                inDiasTicket = 30;
            }
            
            com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerDwnldTPV"), "INFO", current.getIdTerminal() + " - " 
                    + current.getFolio()
                    + " - Se verifica existencia de ticket de sustitución válido dentro de un rango no mayor a " + inDiasTicket + " día(s) atrás.");
            
            SimpleDateFormat sdfFormato = new SimpleDateFormat("yyyy-MM-dd");
            Calendar caFecha = Calendar.getInstance();
            caFecha.add(Calendar.DATE, (-1 * Math.abs(inDiasTicket)));
            TicketsJpaController daoTickets = new TicketsJpaController();
            List<Tickets> lstTickets = daoTickets.findByIds(true, -1, -1, current.getIdDepartment(), "", sdfFormato.format(caFecha.getTime()), 3, 0);
            
            if(lstTickets == null || lstTickets.isEmpty()) {
                com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerDwnldTPV"), "INFO", current.getIdTerminal() + " - " 
                    + current.getFolio()
                    + " - Se verifica existencia de ticket de reprogramación válido dentro de un rango no mayor a " + inDiasTicket + " día(s) atrás.");
                lstTickets = daoTickets.findByIds(true, -1, -1, current.getIdDepartment(), "", sdfFormato.format(caFecha.getTime()), 1, 0);
            }
            
            if(lstTickets != null && !lstTickets.isEmpty()) {
                Tickets myTicket = lstTickets.get(lstTickets.size()-1);
//                System.out.println("*** " + lstTickets.toString());
//                System.out.println("*** " + myTicket.getTicket());
//                System.out.println("*** " + current.getFolio());
                if(!myTicket.getTicket().equalsIgnoreCase(current.getFolio())) {
                    TerminalsvariablesJpaController daoTermVars = new TerminalsvariablesJpaController();
                    Terminalsvariables myTermVar = null;
                    myTermVar = daoTermVars.findTerminalsvariablesByIdName(current.getIdTerminal(), "CMDTckt");
                    if(myTermVar != null && !myTermVar.getValue().trim().isEmpty()) {
                        alert("No es posible liberar, se tienen tickets pendientes.");
                        return;
                    }
                }
            }
        }
        try {
            Messagebox.show("¿Esta seguro de liberar el folio " + ((Terminals)box.getSelectedItem().getValue()).getFolio() + "?", 
                    "Confirmación", Messagebox.OK | Messagebox.CANCEL, Messagebox.QUESTION,
                    new org.zkoss.zk.ui.event.EventListener() {
                        @Override
                        public void onEvent(Event e) {
                            if (null != e.getName()) 
                                switch (e.getName()) {
                                    case "onOK":
                                        new chckTermFolio().liberaTerminal(current);
                                        com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerUsrActivity"), "INFO",
                                                "El usuario " + ((Users)Sessions.getCurrent().getAttribute("mySessionUser")).getUserName() +
                                                        " liberó la serie " + ((Terminals)box.getSelectedItem().getValue()).getIdTerminal() +
                                                        " y folio " + ((Terminals)box.getSelectedItem().getValue()).getFolio());
                                        
                                        new chckTermFolio().checkVarsTcktCve(dao.findByIds(current.getIdGroup(), current.getIdChain(), current.getIdStore(), current.getIdDepartment().getIdDepartment(), "", current.getFolio(), -1));
                                        break;
                                /* Event Name Mapping list
                                Messagebox.YES = "onYes";
                                Messagebox.NO  = "onNo";
                                Messagebox.RETRY = "onRetry";
                                Messagebox.ABORT = "onAbort";
                                Messagebox.IGNORE = "onIgnore";
                                Messagebox.CANCEL = "onCancel";
                                Messagebox.OK = "onOK";
                                 */
                                    case "onCancel":
                                }

                        }
                    }
            );
        } catch(Exception ex) {
            com.tpvs.util.LogApp.addLogException(com.tpvs.util.MyProperties.getPropiedad("stLoggerProcSist"), "EXCEPTION", 
                    "Exception al momento de liberar el folio.", ex);
        }
        redrawActual();
    }

// <editor-fold defaultstate="collapsed" desc="código ejemplo temporal para botón de addVIP()...">
//        public void onClick$addVIP(Event event) {
////        if (current2.getIdGroup() == null || current3.getIdChain() == null || current4.getIdStore() == null || current5.getIdDepartment() == null) {
////            alert("Debe seleccionar Grupo / Cadena / Tienda / Departamento");
////            return;
////        }
////        Sessions.getCurrent().setAttribute("group", current2);
////        Sessions.getCurrent().setAttribute("chain", current3);
////        Sessions.getCurrent().setAttribute("store", current4);
////        Sessions.getCurrent().setAttribute("department", current5);
//        Sessions.getCurrent().setAttribute("operation", "add");
//        Window windowpopup = (Window) Executions.createComponents(
////                "\\personal/cssoftech/proyectos/10-tpvsolutions/TPVSadmin/WebTPVAdmin/branches/gui/tpvsadmin/web" +
////                "http://localhost:8088/tpvsadmin" +
//                "/terminalsVIPPopUp.zul", null, null);
//        windowpopup.setMaximizable(true);
//        try {
//            windowpopup.doModal();
//        } catch(Exception ex) {
//            ex.printStackTrace();
//        }
//    }
// </editor-fold>
    
    public void onClick$modVarsWithTemplate(Event event) {
        callTemplateVariables();
    } 
    
    private void callTemplateVariables() {
        if (box.getSelectedCount() <= 0) {
            alert("Debe seleccionar una terminal.");
            return;
        }
        String stGroupName = current.getIdDepartment().getIdStore().getIdChain().getIdGroup().getGroupName();
        String stRuta = Executions.getCurrent().getDesktop().getWebApp().getRealPath(File.separator + "varsTmpltTerminals" + stGroupName + ".zul");
        if(!(new File(stRuta)).exists()) {
            //alert("No cuenta con template de variables activo.");
            return;
        }
        Sessions.getCurrent().setAttribute("terminalVarsTmplt", (Terminals)box.getSelectedItem().getValue());
        Window windowpopup = (Window) Executions.createComponents("varsTmpltTerminals" + stGroupName + ".zul", null, null);
        windowpopup.setMaximizable(true);
        try {
            windowpopup.doModal();
        } catch(SuspendNotAllowedException ex) {
            ex.printStackTrace();
        }
        redrawActual();
    }
    
    private void checkLastReporte() {
        if (current2.getIdGroup()== null || !bttnObtenerReporte.isVisible()) {
            bttnLastReporte.setVisible(false);
            return;
//        } else if (!validarCorreo(txtBoxEmail.getValue())) {
//            alert("Debe escribir una dirección de correo válida");
//            return;
        }
        
        String stDir = com.tpvs.util.AppControlGeneral.stRutaApp + MyProperties.getPropiedad("stDirToPutAdditionalFiles") + File.separator + "reportesTerminals" + File.separator;
        // String stNameFileDef = currentGroup.getGroupName() + new SimpleDateFormat("yyyyMMddHHmmss").format(Calendar.getInstance().getTime());
        
        FilenameFilter fnfFiltro = new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
//                System.out.println("**** " + name + " - " + current2.getGroupName());
                if (name.contains(current2.getGroupName()) && name.contains("zip")) {
//                    System.out.println("*** si");
                    return true;
                } else {
//                    System.out.println("*** no");
                    return false;
                }
//                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };

        File myDir = new File(stDir);
        File[] fList = myDir.listFiles(fnfFiltro);

        if (fList!=null && fList.length > 0) {
            Arrays.sort(fList);
            if (application.getAttribute("rprtTerminals") != null
                    && ((boolean) application.getAttribute("rprtTerminals"))) {
                if (fList.length > 1) {
                    bttnLastReporte.setLabel(fList[fList.length - 2].getName());
                }
            } else {
                bttnLastReporte.setLabel(fList[fList.length - 1].getName());
//                    System.out.println("**** name.- " + fList[fList.length - 1].getName());
//                    System.out.println("**** canonicalpath.- " + fList[fList.length - 1].getCanonicalPath());
//                    System.out.println("**** absoluteFile.- " + fList[fList.length - 1].getAbsoluteFile());
//                    System.out.println("**** parent.- " + fList[fList.length - 1].getParent());
            }
            bttnLastReporte.setVisible(true);
        }
    }
    
    public void onClick$bttnLastReporte(Event event) {
        descargaLastReport();
    }
    
    private void descargaLastReport() {
        String stDir = com.tpvs.util.AppControlGeneral.stRutaApp + MyProperties.getPropiedad("stDirToPutAdditionalFiles") + File.separator + "reportesTerminals" + File.separator;
        File myFile = new File(stDir + File.separator + bttnLastReporte.getLabel());

        try {
//            System.out.println("********** " + myFile.toString());
            Filedownload.save(myFile, "text/plain");
        } catch (Exception ex) {
            com.tpvs.util.LogApp.addLogException(com.tpvs.util.MyProperties.getPropiedad("stLoggerProcSist"), "EXCEPTION",
                    "Error al descargar el reporte.", ex);
        }
    }
    
    public void onClick$bttnObtenerReporte(Event event) {
        if (current2.getIdGroup()== null) {
            alert("Debe seleccionar el nivel de " + Labels.getLabel("Grupo"));
            return;
//        } else if (!validarCorreo(txtBoxEmail.getValue())) {
//            alert("Debe escribir una dirección de correo válida");
//            return;
        } else {
            ServletContext sc = (ServletContext) Sessions.getCurrent().getWebApp().getNativeContext();
            if (sc.getAttribute("rprtTerminals" + current2.getGroupName()) != null
                    && (boolean) sc.getAttribute("rprtTerminals" + current2.getGroupName()) == true) {
                Calendar caInicio = (Calendar) sc.getAttribute("rprtTerminals" + current2.getGroupName() + "TimeStampInicio");

                long diferencia;
                diferencia = Calendar.getInstance().getTimeInMillis() - caInicio.getTimeInMillis();

                if (diferencia <= 86400000) {
                    alert("Proceso en ejecución, espere su finalización para solicitar un nuevo reporte.");
                    return;
                }
            }
        }
        
        List<Groups> lstTmpGroups = new ArrayList<>();
        if (current2.getIdGroup() == null) {
            lstTmpGroups = new ArrayList(lstMyGroups);
        } else {
            lstTmpGroups.add(current2);
        }
        
        rprtTerminalsThread proceso = new rprtTerminalsThread((ServletContext) Sessions.getCurrent().getWebApp().getNativeContext(), lstTmpGroups,
                    current2, current3, current4, current5, mySessionUser);
        
        proceso.start();
        alert("Proceso en ejecución...");
    }
    
    public void onClick$bttnObtenerReporteBCKP(Event event) {
        barraProgreso.setVisible(true);
        barraProgreso.setValue(0);
        
        StyleBuilder boldStyle = stl.style().bold();
        StyleBuilder boldCenteredStyle = stl.style(boldStyle).setHorizontalAlignment(HorizontalAlignment.CENTER);
        StyleBuilder columnTitleStyle = stl.style(boldCenteredStyle)
                .setBorder(stl.pen1Point())
                .setBackgroundColor(Color.LIGHT_GRAY);
        StyleBuilder columnDataStyle = stl.style().setFontSize(8);
        
        int columns_count = 5; //stNameVarsDepto.split(",",-1).length + stNameVarsTerm.split(",",-1).length;
        TextColumnBuilder<String>[] columns = new TextColumnBuilder[columns_count];
        columns[0] = col.column(Labels.getLabel("Terminal"), "Terminal", type.stringType()).setStyle(columnDataStyle);
        columns[1] = col.column(Labels.getLabel("Modelo"), "Modelo", type.stringType()).setStyle(columnDataStyle);
        columns[2] = col.column(Labels.getLabel("Afiliacion"), "Afiliacion", type.stringType()).setStyle(columnDataStyle);
        columns[3] = col.column(Labels.getLabel("folio"), "Folio", type.stringType()).setStyle(columnDataStyle);
        columns[4] = col.column("Licencia Browser", "LicBrowser", type.stringType()).setStyle(columnDataStyle);
        
        String stDir = com.tpvs.util.AppControlGeneral.stRutaApp + MyProperties.getPropiedad("stDirToPutAdditionalFiles") + File.separator + "reportesTerminals" + File.separator;
        String stNameFileDef = new SimpleDateFormat("yyyyMMddHHmmss").format(Calendar.getInstance().getTime());
        
        String stNameOfFile = stNameFileDef + ".xlsx";
        new File(stDir).mkdirs();
//        new File(stDir + stNameOfFile).createNewFile();
        
//System.out.println("***** Voy aquí 1-");

        try {
            //                JasperPdfExporterBuilder pdfExporter = export.pdfExporter(new File((stDir + stNameOfFile)));
            JasperXlsxExporterBuilder xlsxExporter = export.xlsxExporter(new File(stDir + stNameOfFile))
                    .setDetectCellType(true)
                    .setIgnorePageMargins(true)
                    .setWhitePageBackground(false)
                    .setRemoveEmptySpaceBetweenColumns(true);
            
//System.out.println("***** Voy aquí 2-");

            report()            
                    //                        .setPageFormat(PageType.A3, PageOrientation.LANDSCAPE)
                    .ignorePageWidth()
                    .ignorePagination()
                    .setColumnTitleStyle(columnTitleStyle)
                    .highlightDetailEvenRows()
                    .columns(columns)
                    .title(cmp.text("Reporte de Terminals").setStyle(boldCenteredStyle))//shows report title
                    .pageFooter(cmp.pageXofY().setStyle(boldCenteredStyle))//shows number of page at page footer
                    .setDataSource(createDataSource())//.setDataSource(dataSource)
                    .setVirtualizer(new JRFileVirtualizer(2))
                    //                        .toPdf(pdfExporter)
                    .toXlsx(xlsxExporter);

            //                Filedownload myFileDwnld = new Filedownload();
            //                File myFile = new File(stDir + stNameOfFile);
            //                myFileDwnld.save(myFile, "application/" + "PDF");
        } catch (DRException ex) {
            Logger.getLogger(rprtTerminalsThread.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
	public void onClick$bttnTermAltaMasiva(Event event) {
        if (current2.getIdGroup() == null || current3.getIdChain() == null) {
            alert("Debe seleccionar Adquirente / Cadena");
            return;
        }
        subirArchivo(1);
    }
    
    void subirArchivo(int inProceso) {
        try {
            Media media = Fileupload.get();
            if (media != null) {
                if (!media.getContentType().equals("text/csv")
                        && !media.getContentType().equals("text/plain")
                        && !media.getContentType().equals("application/csv")
                        && !media.getContentType().equalsIgnoreCase("application/vnd.ms-excel")
                        && !media.getName().contains(".csv")) {
                    alert("Debe seleccionar un archivo con formato csv ó txt \n" + media.getContentType());
                    return;
                }
            }
            BufferedWriter writer = null;
            File file = null;
            try {
                file = File.createTempFile("temporal_", ".borrame");
                if (media.isBinary()) {
                    Files.copy(file, media.getStreamData());
                } else {
                    writer = new BufferedWriter(new FileWriter(file));
                    Files.copy(writer, media.getReaderData());
                    writer.close();
                }
                int tamanio = (int) file.length();
                if (tamanio <= 0) {
                    if (file.exists()) {
                        file.delete();
                    }
                    if (writer != null) {
                        writer.close();
                    }
                    throw new IOException("Imposible cargar archivo [" + media.getName() + "], se leyeron[" + tamanio + "] bytes ");
                }
                final Execution exe = Executions.getCurrent();
                String stPathToPutApp = exe.getDesktop().getWebApp().getRealPath("/") + File.separator + MyProperties.getPropiedad("stDirToPutAdditionalFiles") + File.separator;
                SimpleDateFormat dfFormat = new SimpleDateFormat("yyyyMMddHHmmssSSS");
                File fileTerminals = new File(stPathToPutApp + File.separator
                        + "Terminales_AltaMasiva_" + dfFormat.format(Calendar.getInstance().getTime())
                        + media.getName().substring(media.getName().indexOf("."), media.getName().length()));
                Files.copy(fileTerminals, file, 0);
                file.delete();

                HashMap<String, Integer> hmResultado = procesaArchivo(fileTerminals, inProceso);
                redrawActual();
                if (hmResultado == null) {
                    alert("No fue posible procesar el archivo " +fileTerminals.getName() + " ¡Verifique!");
                } else {
                    String stMensaje = "El usuario " + ((Users) Sessions.getCurrent().getAttribute("mySessionUser")).getName() + " subió el archivo " + fileTerminals.getName() + " para ";
                    String stResultado = "Registros Procesados.- " + hmResultado.get("inRegistrosProcesados") + "\n"
                            + "Registros Nuevos.- " + hmResultado.get("inRegistrosNuevos") + "\n"                            
                            + "Registros Rechazados.- " + hmResultado.get("inRegistrosRechazados");
                    switch (inProceso) {
                        case 1:
                            stMensaje += "Proceso.- Registro de Terminales - Alta Masiva.";
                    }
                    alert("Archivo procesado con éxito.\n" + stResultado);
                    com.tpvs.util.LogApp.addTraceToApp("logUsrActivity", "INFO", stMensaje + "\n" + stResultado);
                }
            } catch (IOException ex) {
                ex.printStackTrace();
                file.delete();
                throw new RuntimeException(ex);
            } catch (Exception ex) {
                ex.printStackTrace();
                if (file != null) {
                    file.delete();
                }
                throw new RuntimeException(ex);
            } finally {
                try {
                    if (file != null && file.exists()) {
                        file.delete();
                    }
                    if (writer != null) {
                        writer.close();
                    }
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        } catch (RuntimeException ex) {
            com.tpvs.util.LogApp.addLogException(com.tpvs.util.MyProperties.getPropiedad("stLoggerProcSist"), "EXCEPTION",
                    "Ocurrió un error al cargar el archivo al sistema.", ex);
        }
    }
    private HashMap<String, Integer> procesaArchivo(File myFile, int inProceso) {
        String stHeadersCsv = "SerieTerminal,Licencia,Modelo,AfiliacionPesos,AfiliacionDolares,NombreComercio,Contacto,Telefono,CódigoPostal,CalleNumComercio,Ciudad,TerminalID,TipoIndustria,Perfil,stDevice,evoBranch,evoPosId,MAXCCOM";
        int inLongitudLinea = stHeadersCsv.split(",", -2).length;
        int inRegistrosProcesados = 0, inRegistrosNuevos = 0, inRegistrosRechazados = 0;
        HashMap<String, Integer> hmResultado = null;
        File fiResultado;
        Terminals myTerm;
        Departments myDepto;
        Licenciasprecargadas myLic;
        CpasentamientosJpaController daoCpasentamientos = new CpasentamientosJpaController();
        Stores myStore;

        try {
            BufferedWriter bwFile = null;
            fiResultado = new File(myFile.getParent() + File.separator
                    + myFile.getName().substring(0, myFile.getName().lastIndexOf(".")) + "_response"
                    + myFile.getName().substring(myFile.getName().lastIndexOf("."), myFile.getName().length()));
            bwFile = new Utils().OpenFileToWrite(bwFile, fiResultado.getAbsolutePath());

            CSVReader reader = new CSVReader(new FileReader(myFile), ',', CSVWriter.NO_QUOTE_CHARACTER);
            List myEntries = reader.readAll();

            switch (inProceso) {
                case 1:
                    new Utils().WriteToFile(bwFile, "Proceso.- Registro de Terminales - Alta Masiva." + "\r\n");
                    break;
            }

            for (Object myEntrie : myEntries) {
                String[] linea = (String[]) myEntrie;
                inRegistrosProcesados++;
                if (linea.length != inLongitudLinea) {
                    new Utils().WriteToFile(bwFile, Arrays.toString(linea) + "|ERROR - Parámetros no esperados." + "\r\n");
                    inRegistrosRechazados++;
                    continue;
                } else if (validateData(linea)) {
                    new Utils().WriteToFile(bwFile, Arrays.toString(linea) + "|ERROR - Parámetros fuera de rango." + "\r\n");
                    inRegistrosRechazados++;
                    continue;
                }

                myLic = daoLicencias.findLicenciasprecargadas(linea[0].trim());
                switch (inProceso) {
                    case 1:
                        if (myLic != null) {
                            myLic.setBrowserLic(linea[1].trim());
                            daoLicencias.edit(myLic);
                            com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "DEBUG",
                                    "Alta Masiva - Se actualizo la licencia de la terminal " + linea[0]);
                        } else {
                            myLic = new Licenciasprecargadas(linea[0].trim(), linea[1].trim());
                            myLic.setStatuslicencia(Boolean.TRUE);
                            daoLicencias.create(myLic);
                            com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "DEBUG",
                                    "Alta Masiva - Se creo la licencia para la terminal " + linea[0]);
                        }

                        HashMap<String, String> mapStores = new HashMap<>();
                        mapStores.put("RET", "Retail");
                        mapStores.put("RPO", "Restaurante");
                        mapStores.put("HOT", "Hotel");
                        mapStores.put("ARR", "Arrendadoras");
                        mapStores.put("PAG", "Pagomático Empresas");
                        mapStores.put("COR", "Corporativa");

                        List<Stores> lstTmpStore = dao4.findByIdsGroupChain(true, -1, -1, Long.parseLong(current2.getIdGroup().toString()), Long.parseLong(current3.getIdChain().toString()), -1, mapStores.get(linea[12]));
                        if (lstTmpStore == null || lstTmpStore.isEmpty()) {
                            com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "INFO", "No se localizó la operativa " + mapStores.get(linea[12]));
                            new Utils().WriteToFile(bwFile, Arrays.toString(linea) + "|INFO - No se localizó la operativa " + linea[12] + "\r\n");
                            inRegistrosRechazados++;
                            continue;
                        }

                        myStore = lstTmpStore.get(0);
                        myDepto = new Departments();
                        myDepto.setIdDepartment(null);
                        myDepto.setIdGroup(Long.parseLong(current2.getIdGroup().toString()));
                        myDepto.setIdChain(Long.parseLong(current3.getIdChain().toString()));
                        myDepto.setIdStore(myStore);
                        myDepto.setDepartment(linea[5]);
                        myDepto.setIdAsesor(null);
                        myDepto.setNoAfiliacion(linea[3]);
                        myDepto.setContact(linea[6]);
                        myDepto.setPhone(linea[7]);
                        myDepto.setIdProveedor(null);
                        myDepto.setUsuarioRegistro("AltaMasiva");
                        myDepto.setFechaRegistro(Calendar.getInstance().getTime());

                        try {
                            dao5.create(myDepto);
                            myDepto = dao5.findDepartments(myDepto.getIdDepartment());
                            myDepto.setFolio(myDepto.getIdDepartment().toString());
                            dao5.edit(myDepto);
                            List<Cpasentamientos> lstCpasentamientos = daoCpasentamientos.findByIds(true, -1, -1, linea[8], "", "", "", "");
                            if (lstCpasentamientos == null || lstCpasentamientos.size() <= 0) {
                                if (linea[8].length() >= 3) {
                                    lstCpasentamientos = daoCpasentamientos.findByIds(true, -1, -1, linea[8].substring(0, 3) + "00", "", "", "", "");
                                }
                            }
                            if (lstCpasentamientos != null && lstCpasentamientos.size() > 0) {
                                myDepto.setCpasentamientos(lstCpasentamientos.get(0));
                                dao5.edit(myDepto);
                            } else {
                                myDepto.setCpasentamientos(null);
                                dao5.edit(myDepto);
                            }
                            com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "DEBUG",
                                    "Alta Masiva - Se creo el Departamento " + myDepto.getIdDepartment() + " - " + linea[5]);
                        } catch (Exception ex) {
                            com.tpvs.util.LogApp.addLogException(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "EXCEPTION",
                                    "Alta Masiva - No fue posible la creación del Departamento " + linea[5], ex);
                            new Utils().WriteToFile(bwFile, Arrays.toString(linea) + "|INFO - No fue posible la creación del Departamento " + linea[5] + "\r\n");
                            inRegistrosRechazados++;
                            continue;
                        }

                        myTerm = new Terminals();
                        myTerm.setIdGroup(myDepto.getIdGroup());
                        myTerm.setIdChain(myDepto.getIdChain());
                        myTerm.setIdStore(myDepto.getIdStore().getIdStore());
                        myTerm.setIdDepartment(myDepto);
                        myTerm.setIdTerminal(linea[0]);
                        myTerm.setModel(linea[2]);
                        myTerm.setAddDate(Calendar.getInstance().getTime());
                        myTerm.setBrowserLic(linea[1]);
                        myTerm.setDwnldVars(Boolean.TRUE);
                        myTerm.setMerchantID(linea[3]);
                        myTerm.setLastCommDate(null);
                        myTerm.setFolio(myDepto.getFolio());
                        myTerm.setActualapplicationsList(null);
                        myTerm.setTerminalsvariablesList(null);
                        myTerm.setActualizacionAppVersion(0);
                        myTerm.setActualizacionVars(0);
                        myTerm.setFechaultimodwnldvar(null);
                        myTerm.setFechasolicitaliberacion(null);

                        boolean boIsNew = false;

                        try {
                            dao.create(myTerm);
                            boIsNew = true;
                            com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "DEBUG",
                                    "Alta Masiva- La terminal-folio fue generado " + myTerm.getIdTerminal() + " - " + myTerm.getFolio()
                                    + " depto-folio " + myDepto.getIdDepartment() + " - " + myDepto.getDepartment() + " - "
                                    + myDepto.getFolio() + ".");
                        } catch (Exception ex) {
                            com.tpvs.util.LogApp.addLogException(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "EXCEPTION",
                                    "No fue posible la creación de la Terminal " + linea[0], ex);
                            new Utils().WriteToFile(bwFile, Arrays.toString(linea) + "|INFO - No fue posible la creación de la Terminal " + linea[0] + "\r\n");
                            inRegistrosRechazados++;
                            continue;
                        }
                        try {
                            /*Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') (CWE ID 470)*/
                            Utils utility = new Utils();
                            String SanitizeNameClass;
                            SanitizeNameClass = utility.sanitizeClassName("com.tpvs.util.initVars" + myDepto.getIdStore().getIdChain().getIdGroup().getGroupName());
                            //Class myInitVars = Class.forName("com.tpvs.util.initVars" + myDepto.getIdStore().getIdChain().getIdGroup().getGroupName());
                            Class myInitVars = Class.forName(SanitizeNameClass);
                            Object myObjInitVars = myInitVars.newInstance();
                            Class[] argTypesDepto = new Class[]{long.class, boolean.class};
                            Method myMethodDepto = myInitVars.getDeclaredMethod("boCreateDefaultVarsDepartments", argTypesDepto);

                            myMethodDepto.invoke(myObjInitVars, myDepto.getIdDepartment(), true);

                            com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "INFO",
                                    "Alta Masiva - Proceso de creación de variables iniciales en generacion de folios para el grupo " + myDepto.getIdStore().getIdChain().getIdGroup().getGroupName()
                                    + " y departamento " + myDepto.getDepartment() + " realizado.");

                            Class[] argTypesTerminal = new Class[]{String.class, boolean.class};
                            Method myMethodTerminal = myInitVars.getDeclaredMethod("boCreateDefaultVarsTerminals", argTypesTerminal);
                            myMethodTerminal.invoke(myObjInitVars, myTerm.getIdTerminal(), boIsNew);
                            com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "INFO",
                                    "Alta Masiva - Proceso de creación de variables iniciales para el grupo " + myTerm.getIdDepartment().getIdStore().getIdChain().getIdGroup().getGroupName()
                                    + " y la terminal " + myTerm.getIdTerminal() + " realizado - IsNew -> " + boIsNew + " .");

                        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | NoSuchMethodException | SecurityException | IllegalArgumentException | InvocationTargetException ex) {
                            com.tpvs.util.LogApp.addLogException(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "INFO",
                                    "No se tiene proceso de variables iniciales para generacion de folios del grupo " + myDepto.getIdStore().getIdChain().getIdGroup().getGroupName()
                                    + " y departamento " + myDepto.getDepartment(), ex);
                            new Utils().WriteToFile(bwFile, Arrays.toString(linea) + "|INFO - No fue posible la creación de las variables iniciales del Departamento " + linea[5] + "\r\n");
                            inRegistrosRechazados++;
                            continue;

                        } catch (Exception ex) {
                            com.tpvs.util.LogApp.addLogException(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "INFO",
                                    "No se tiene proceso de variables iniciales para generacion de folios del grupo " + myDepto.getIdStore().getIdChain().getIdGroup().getGroupName()
                                    + " y departamento " + myDepto.getDepartment(), ex);
                            new Utils().WriteToFile(bwFile, Arrays.toString(linea) + "|INFO - No fue posible la creación de las variables iniciales del Departamento " + linea[5] + "\r\n");
                            inRegistrosRechazados++;
                            continue;
                        }
                        HashMap<String, String> hmValores = new HashMap<>();
                        hmValores.put("afiliacion", linea[3]);
                        hmValores.put("afiliacionDolares", linea[4]);
                        hmValores.put("nombreFantasia", linea[5]);
                        hmValores.put("cp", linea[8]);
                        hmValores.put("direccion", linea[9]);
                        hmValores.put("ciudad", linea[10]);
                        hmValores.put("TerminalID", linea[11]);
                        hmValores.put("TipoIndustria", linea[12]);
                        hmValores.put("perfil", linea[13]);
                        hmValores.put("stDevice", linea[14]);
                        hmValores.put("evoBranch", linea[15]);
                        hmValores.put("evoPosId", linea[16]);
                        if (linea[17] != null && !linea[17].isEmpty()) {
                            hmValores.put("MAXCCOM", linea[17]);
                        }
                        if (linea[12].equalsIgnoreCase("T02")) {
                            hmValores.put("MAXCCOM", "00");
                        }

                        boSaveVariables(myDepto, myTerm, hmValores);
                        inRegistrosNuevos++;
                        break;
                }
            }
            new Utils().WriteToFile(bwFile, "\r\n\r\n");
            new Utils().WriteToFile(bwFile, "Resumen del Proceso:\r\n");
            new Utils().WriteToFile(bwFile, "a) Registros Procesados.- " + inRegistrosProcesados + "\r\n");
            new Utils().WriteToFile(bwFile, "b) Registros Nuevos.- " + inRegistrosNuevos + "\r\n");
            new Utils().WriteToFile(bwFile, "d) Registros Rechazados.- " + inRegistrosRechazados);
            new Utils().CloseFileToWrite(bwFile);

            hmResultado = new HashMap<>();
            hmResultado.put("inRegistrosProcesados", inRegistrosProcesados);
            hmResultado.put("inRegistrosNuevos", inRegistrosNuevos);
            hmResultado.put("inRegistrosRechazados", inRegistrosRechazados);
        } catch (FileNotFoundException ex) {
//            Logger.getLogger(LicsPrecargadasControllerPag.class.getName()).log(Level.SEVERE, null, ex);
            com.tpvs.util.LogApp.addLogException(com.tpvs.util.MyProperties.getPropiedad("stLoggerProcSist"), "EXCEPTION",
                    "No se localizó el archivo de Terminales a procesar.", ex);
        } catch (IOException ex) {
//            Logger.getLogger(LicsPrecargadasControllerPag.class.getName()).log(Level.SEVERE, null, ex);
            com.tpvs.util.LogApp.addLogException(com.tpvs.util.MyProperties.getPropiedad("stLoggerProcSist"), "EXCEPTION",
                    "Error de acceso al archivo de Terminales a procesar.", ex);
        } catch (Exception ex) {
//            Logger.getLogger(LicsPrecargadasControllerPag.class.getName()).log(Level.SEVERE, null, ex);
            com.tpvs.util.LogApp.addLogException(com.tpvs.util.MyProperties.getPropiedad("stLoggerProcSist"), "EXCEPTION",
                    "Error al procesar registro de Terminales.", ex);
        }
        return hmResultado;
    }

    boolean boSaveVariables(Departments myDepto, Terminals myTerm, HashMap<String, String> hmValoresOperacion) {
        boolean boResultado = true;

        ArrayList<String> lstVarsTemplt = new ArrayList<>();
        ArrayList<String> lstVarsTempltTerm = new ArrayList<>();
        
        
        if (hmValoresOperacion.containsKey("nombreFantasia")) {
            lstVarsTemplt.add("varTxtNombreComercio|#MN[[bd_noafiliacion]]|Nombre del Comercio|" + hmValoresOperacion.get("nombreFantasia"));
            lstVarsTemplt.add("varTxtCalleYNumeroComercio|#MA[[bd_noafiliacion]]|Calle y Número del Comercio.|" + hmValoresOperacion.get("nombreFantasia") + "/" + (hmValoresOperacion.containsKey("direccion")?hmValoresOperacion.get("direccion"):""));
        }
        /*if (hmValoresOperacion.containsKey("direccion")) {
            lstVarsTemplt.add("varTxtCalleYNumeroComercio|#MA[[bd_noafiliacion]]|Calle y Número del Comercio.|" + (hmValoresOperacion.containsKey("direccion") ? hmValoresOperacion.get("direccion") : ""));
        }*/        
        //Linea original en webservice
        /*if(hmValoresOperacion.containsKey("razonSocial")) {
            lstVarsTemplt.add("varTxtCalleYNumeroComercio|#MA[[bd_noafiliacion]]|Calle y Número del Comercio.|" + hmValoresOperacion.get("razonSocial") + "/" + (hmValoresOperacion.containsKey("direccion")?hmValoresOperacion.get("direccion"):""));
        }*/

        System.out.println("*****-->>>>>>");
        System.out.println(hmValoresOperacion.toString());
        System.out.println("*****-->>>>>>");

        if (hmValoresOperacion.containsKey("ciudad")) {
            lstVarsTemplt.add("varTxtCiudadComercio|#MA2[[bd_noafiliacion]]|Ciudad del Comercio.|" + (hmValoresOperacion.containsKey("ciudad") ? hmValoresOperacion.get("ciudad") : ""));            
        }
        /*if(hmValoresOperacion.containsKey("rut")) {
            lstVarsTemplt.add("varTxtCiudadComercio|#MA2[[bd_noafiliacion]]|Ciudad del Comercio.|" + hmValoresOperacion.get("rut") + "/" + (hmValoresOperacion.containsKey("ciudad")?hmValoresOperacion.get("ciudad"):""));
            lstVarsTemplt.add("varTxtRUT|#RUT[[bd_noafiliacion]]|Valor RUT|" + hmValoresOperacion.get("rut"));
        }*/
        if (hmValoresOperacion.containsKey("cp")) {
            lstVarsTemplt.add("varTxtCodigoPostal|#CP[[bd_noafiliacion]]|Código postal.|" + (hmValoresOperacion.containsKey("cp") ? hmValoresOperacion.get("cp") : ""));
        }
        if (hmValoresOperacion.containsKey("afiliacion")) {
            lstVarsTemplt.add("lblMerchantId|#MID[[bd_noafiliacion]]|Merchant ID.|" + (hmValoresOperacion.containsKey("afiliacion") ? hmValoresOperacion.get("afiliacion") : ""));
        }
        if (hmValoresOperacion.containsKey("afiliacionDolares")) {//&& !hmValoresOperacion.get("afiliacionDolares").isEmpty()) {
            lstVarsTemplt.add("varTxtMerchantIdDlls|#MIDDLRS[[bd_noafiliacion]]|Merchant ID DLLS.|" + (hmValoresOperacion.containsKey("afiliacionDolares") ? hmValoresOperacion.get("afiliacionDolares") : ""));
        }
        if(hmValoresOperacion.containsKey("terminalIdAmex")) {
            lstVarsTemplt.add("varTxtTerminaldIdTxsAmex|#TIDAMEX[[bd_noafiliacion]]|Terminal ID para Transacciones AMEX.|" + (hmValoresOperacion.containsKey("terminalIdAmex")?hmValoresOperacion.get("terminalIdAmex"):""));
        }
        if(hmValoresOperacion.containsKey("afiliacionAmex")) {
            lstVarsTemplt.add("varTxtMerchantIdTxsAmex|#MIDAMEX[[bd_noafiliacion]]|Merchant ID para Transacciones AMEX.|" + (hmValoresOperacion.containsKey("afiliacionAmex")?hmValoresOperacion.get("afiliacionAmex"):""));
        }
        if (hmValoresOperacion.containsKey("stDevice")) {
            lstVarsTemplt.add("varTxtstDevice|#stDevice|stDevice.|" + (hmValoresOperacion.containsKey("stDevice") ? hmValoresOperacion.get("stDevice") : ""));
        }
        if (hmValoresOperacion.containsKey("evoBranch")) {
            lstVarsTemplt.add("varTxtevoBranch|#evoBranch|evoBranch.|" + (hmValoresOperacion.containsKey("evoBranch") ? hmValoresOperacion.get("evoBranch") : ""));
        }
        if (hmValoresOperacion.containsKey("evoPosId")) {
            lstVarsTemplt.add("varTxtevoPosId|#evoPosId|evoPosId.|" + (hmValoresOperacion.containsKey("evoPosId") ? hmValoresOperacion.get("evoPosId") : ""));
        }
        boolean boDlls = false;
        try {
            if (hmValoresOperacion.containsKey("afiliacionDolares") && !hmValoresOperacion.get("afiliacionDolares").isEmpty()) {
                boDlls = true;
            }
            if (hmValoresOperacion.containsKey("afiliacionDolares") && hmValoresOperacion.get("afiliacionDolares").isEmpty()) {
                boDlls = false;
            }
        } catch (Exception ex) {
            com.tpvs.util.LogApp.addLogException(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "INFO",
                    "No fue posible almacenar variable. ", ex);
        }
        if (boDlls) {
            lstVarsTemplt.add("lstClvMoneda|#MONEDA[[bd_noafiliacion]]|Clave de Moneda.|" + "840");
        }
        if (!boDlls) {
            lstVarsTemplt.add("lstClvMoneda|#MONEDA[[bd_noafiliacion]]|Clave de Moneda.|" + "152");
        }
        if(hmValoresOperacion.containsKey("MAXCCOM")){            
            lstVarsTemplt.add("varTxtCuotasComercios|#MAXCCOM|Cuotas Comercio|" + hmValoresOperacion.get("MAXCCOM"));
        }
        Boolean boEncenderLealtad = false;
        PerfilesoperativaJpaController daoPerfil = new PerfilesoperativaJpaController();
        Perfilesoperativa myPerfil = daoPerfil.findByIds(true, -1, -1, -1, -1, hmValoresOperacion.get("perfil").trim());
        if (myPerfil != null) {
            lstVarsTempltTerm.add("varTxtPerfilOperativa|#perfilOper|Perfil Operativa.|" + myPerfil.getIdPerfilOperativa());

            String[] stPerfilesLealtad = {"QR", "R", "T", "QT"};
            for (String stPerfilAnalizar : stPerfilesLealtad) {
                if (myPerfil.getNombrePerfil().trim().substring(0, stPerfilAnalizar.length()).equalsIgnoreCase(stPerfilAnalizar)) {
                    boEncenderLealtad = true;
                    break;
                }
            }
        } else {
            com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "INFO",
                    "No se localizó el perfil " + hmValoresOperacion.get("perfil").trim().trim() + " en la tabla de perfilesOperativa.");
        }
        if (hmValoresOperacion.containsKey("TerminalID")) {
            lstVarsTempltTerm.add("varTxtTerminalId|#TID[[bd_noafiliacion]]|Terminal ID.|" + (hmValoresOperacion.containsKey("TerminalID") ? hmValoresOperacion.get("TerminalID") : ""));
        }
        if (myDepto != null) {
            new initVarsEGlobalLatam().deleteVars(lstVarsTemplt, "departmentsvariables", "iddepartment=" + myDepto.getIdDepartment());
            new initVarsEGlobalLatam().insertVars(lstVarsTemplt, "departmentsvariables", "" + myDepto.getIdDepartment());
        }
        if (myTerm != null) {
            new initVarsEGlobalLatam().deleteVars(lstVarsTempltTerm, "terminalsvariables", "idterminal='" + myTerm.getIdTerminal() + "'");
            new initVarsEGlobalLatam().insertVars(lstVarsTempltTerm, "terminalsvariables", myTerm.getIdTerminal());
        }

        return boResultado;
    }
    
    public boolean validateData(String [] data){
        boolean validData = true;
        
        if(data[0].trim().length() <= 4 || data[0].trim().length() > 12 ){
            com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "INFO", "Alta Masiva - Serie Terminal con formato invalido " + data[0]);
            return  validData;
        }
        if(data[1].trim().length() != 32){
            com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "INFO", "Alta Masiva - Licencia con formato invalido " + data[1]);
            return validData;
        }
        if(!isNumeric(data[3]) || data[3].length() > 7 ){
            com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "INFO", "Alta Masiva - Afiliación con formato invalido " + data[3]);
            return validData;
        }
        if(!data[4].isEmpty() && data[4].length() > 7 || !data[4].isEmpty() && !isNumeric(data[4])){
            com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "INFO", "Alta Masiva - Afiliación Dolares con formato invalido " + data[4]);
            return validData;
        }
        if(!isText(data[5]) || data[5].length() > 30){
            com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "INFO", "Alta Masiva - Nombre Fantasía con formato invalido " + data[5]);
            return validData;
        }
        if(!isNumeric(data[8]) || data[8].length() > 7){
            com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "INFO", "Alta Masiva - Codigo postal con formato invalido " + data[8]);
            return validData;
        }
        if(!isText(data[9]) || data[9].length() > 100){
            com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "INFO", "Alta Masiva - Dirección con formato invalido " + data[9]);
            return validData;
        }
        if(!isText(data[10]) || data[10].length() > 100){
            com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "INFO", "Alta Masiva - Ciudad con formato invalido " + data[10]);
            return validData;
        }
        if(!isText(data[12]) || data[12].length() > 3){
            com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "INFO", "Alta Masiva - Operativa con formato invalido " + data[12]);
            return validData;
        }
        if(!isAlphaNumeric(data[13]) || data[13].length() > 4){
            com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "INFO", "Alta Masiva - Perfil con formato invalido " + data[13]);
            return validData;
        }
        if (data[17] != null && !data[17].isEmpty()) {
            if (!isNumeric(data[17]) || data[17].length() > 2 || data[17].length() < 2 || !isAllowedmaxccom(data[17])) {
                com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerSistema"), "INFO",
                        "Alta Masiva - Bandera para cuotas comercio (MAXCCOM) con formato invalido" + data[17]);
                return validData;
            }
        }
        validData = false;
        return validData;        
    }       
    public static boolean isNumeric(String str) {
        return (str.matches("[+-]?\\d*(\\.\\d+)?") && str.equals("")==false);        
    }
    public static boolean isText(String str) {
        return (str.matches("^[A-Za-z0-9ñÑáéíóúÁÉÍÓÚ [!\\\"#$%&'()*+,\\\\./:;<=>?@[\\\\]^_`{|}~-]]*$") && str.equals("")==false);
    }
    public static boolean isAlphaNumeric(String str) {
        return (str.matches("^[A-Za-z0-9 ]*$") && str.equals("")==false);
    }
    public static boolean isAllowedmaxccom(String str){
        if(str.equals("00")|| str.equals("02")|| str.equals("03")|| str.equals("04")|| str.equals("05")|| str.equals("06")||str.equals("07")|| str.equals("08")|| str.equals("09")|| str.equals("10")|| str.equals("11")|| str.equals("12")){
            return true;
        }else{
            return false;
        }
    } 
    private JRDataSource createDataSource() {
        int inRegistrosAtendidos=0;
        DRDataSource dataSource = null;
        
        StyleBuilder boldStyle = stl.style().bold();

        String[] columnsDS = new String[5];
        columnsDS[0] = "Terminal";
        columnsDS[1] = "Modelo";
        columnsDS[2] = "Afiliacion";
        columnsDS[3] = "Folio";
        columnsDS[4] = "LicBrowser";
        
        dataSource = new DRDataSource(columnsDS);
        
        
        List<Groups> lstTmpGroups = new ArrayList<>();
        if (current2.getIdGroup() == null) {
            lstTmpGroups = new ArrayList(lstMyGroups);
        } else {
            lstTmpGroups.add(current2);
        }
        
        int inTotalRegistros = dao.getTerminalsCount(lstTmpGroups, current3.getIdChain() != null ? current3.getIdChain() : 0,
                current4.getIdStore()!=null?current4.getIdStore():0, current5.getIdDepartment()!=null?current5.getIdDepartment():0, 
                textBoxQryTerminal.getValue(), textBoxFolioTerminal.getValue(), mySessionUser.getIdProveedor()!=null?mySessionUser.getIdProveedor().getIdProveedor():0,
                txtBoxAfiliacion.getValue(), txtTerminalId.getValue());
        
        int inStep = 10000;
        
//        System.out.println("***** Voy aquí 1");
        
        for(int i=0; i<=inTotalRegistros; i+=inStep) {
        
            List<Terminals> lstRegistros = dao.findByIdsWithTerminalId(false, inStep, i, lstTmpGroups, current3.getIdChain()!=null?current3.getIdChain():0,
                    current4.getIdStore()!=null?current4.getIdStore():0, current5.getIdDepartment()!=null?current5.getIdDepartment():0, 
                    textBoxQryTerminal.getValue(), textBoxFolioTerminal.getValue(), mySessionUser.getIdProveedor()!=null?mySessionUser.getIdProveedor().getIdProveedor():0,
                    txtBoxAfiliacion.getValue(), txtTerminalId.getValue());

//            System.out.println("***** Voy aquí 2");

            if(lstRegistros == null || lstRegistros.size() <= 0) {
                alert("no encontré registros");
                continue;
            } else {
//                System.out.println("*** total registros " + lstRegistros.size());
            }
            
//            System.out.println("***** Voy aquí 3");

            for(Terminals myTerm : lstRegistros) {
                Object[] row = new Object[5];

                row[0] = myTerm.getIdTerminal();
                row[1] = myTerm.getModel();
                row[2] = myTerm.getMerchantID();
                row[3] = myTerm.getFolio();
                row[4] = myTerm.getBrowserLic();

                dataSource.add(row);

                inRegistrosAtendidos++;
                barraProgreso.setValue((int)(((double)i/(double)inTotalRegistros)*100));
//                System.out.println("*** " + inRegistrosAtendidos);
            }

//            System.out.println("***** Voy aquí 4 -- " + i + " - " + inTotalRegistros + " - " + (int)(((double)i/(double)inTotalRegistros)*100));
        }
        
        return dataSource;
    }

    public void onClick$btnBuscarTerminal(Event event) {
//        System.out.println("::: onClick de btnBuscarTerminal...");
        //Clients.showBusy("::: Usr busca terminal", true);
        redraw(0, pagTerminales.getPageSize(), true);
// <editor-fold defaultstate="collapsed" desc="código original de $btnBuscarTerminal()...">
////        if (current2.getIdGroup() == null || current3.getIdChain() == null
////                || (textBoxQryTerminal==null || textBoxQryTerminal.getValue().isEmpty() || textBoxQryTerminal.getValue().length()<=3)) {
////            alert("Debe seleccionar por lo menos Grupo / Cadena y escribir 4 dígitos del número de serie");
////            return;
////        }
////        try {
////            if(textBoxQryTerminal.getValue().isEmpty()) {
//////                alert("Debe escribir el número de serie a buscar");
////                setContentBoxByDepartmens();
////                return;
////            }
////        } catch(Exception ex) {
////            alert("Debe escribir el número de serie a buscar");
////            ex.printStackTrace();
////            return;
////        }
////        if(current5.getIdDepartment() == null) {
////            if (current4.getIdStore() == null) {
////                box.setModel(new BindingListModelList(dao.findByIdChainIdTerminal(current2.getIdGroup(), current3.getIdChain(), textBoxQryTerminal.getValue()), true));
////            } else {
////                box.setModel(new BindingListModelList(dao.findByIdStoreIdTerminal(current2.getIdGroup(), current3.getIdChain(), current4.getIdStore(), textBoxQryTerminal.getValue()), true));
////            }
////        } else {
////            box.setModel(new BindingListModelList(dao.findByIdDepartmentIdTerminal(current2.getIdGroup(), current3.getIdChain(), current4.getIdStore(), current5.getIdDepartment(), textBoxQryTerminal.getValue()), true));
////        }
//////        box.setModel(new BindingListModelList(dao.findTerminalsLikeIdTerminal(textBoxQryTerminal.getValue()), true));// </editor-fold>
    }

// <editor-fold defaultstate="collapsed" desc="Código deprecado para llenado de resultados....">
//    public void setContentBoxByDepartmens() {
//        if(current5.getIdDepartment() == null) {
//            if (current4.getIdStore() == null) {
//                if (current3.getIdChain() == null) {
//                    // <editor-fold defaultstate="collapsed" desc="BUSCANDO x Grupo...">
//                    if (current2.getIdGroup() == null) {
//                        System.out.println("  * Combos vacíos BUSCANDO Todas paginado...");
//                        ////box.setModel(new BindingListModelList(dao.findTerminalsEntities(), true));
//                        box.setModel(new BindingListModelList(dao.findTerminalsEntities(pagTerminales.getPageSize(), 0), true));
//                        redraw(0, pagTerminales.getPageSize());
//                    } else {
//                        System.out.println("  * BUSCANDO x Grupo...");
//                        //Clients.showBusy("BUSCANDO x Grupo", true);
//                        box.setModel(new BindingListModelList(dao.findOnlyTerminalsForGroups(true, -1, -1, current2.getIdGroup()), true));
//                        //redraw(0, 15);
//                        redraw(0, pagTerminales.getPageSize());
//                        System.out.println("  * ...done");
//                        //Clients.showBusy(null, false);
//                        return;
//                    }
//                    // </editor-fold>
//                } else {
//                    //Clients.showBusy("BUSCANDO x Gpo. y CADENA", true);
//                    System.out.println("  * BUSCANDO x Gpo. y CADENA...");
//                    box.setModel(new BindingListModelList(dao.findOnlyTerminalsForGroupsChains(true, -1, -1, current2.getIdGroup(), current3.getIdChain()), true));
//                    redraw(0, pagTerminales.getPageSize());
//                    System.out.println("  * ...done");
//                    //Clients.showBusy(null, false);
//                }
//            } else {
//                //Clients.showBusy("BUSCANDO x TIENDA", true);
//                System.out.println("BUSCANDO x TIENDA...");
//                box.setModel(new BindingListModelList(dao.findOnlyTerminalsForGroupsChainsStores(true, -1, -1, current2.getIdGroup(), current3.getIdChain(), current4.getIdStore()), true));
//                redraw(0, pagTerminales.getPageSize());
//                System.out.println("  * ...done");
//                //Clients.showBusy(null, false);
//            }
//        } else {
//            System.out.println("BUSCANDO x DEPARTAMENTO...");
//            box.setModel(new BindingListModelList(dao.findOnlyTerminalsForGroupsChainsStoresDepartments(true, -1, -1, current2.getIdGroup(), current3.getIdChain(), current4.getIdStore(), current5.getIdDepartment()), true));
//            redraw(0, pagTerminales.getPageSize());
//            System.out.println("  * ...done");
//        }
//
//// <editor-fold defaultstate="collapsed" desc="código original de setContentBoxByDepartmens()...">
//////        if(current5.getIdDepartment() == null) {
//////            if (current4.getIdStore() == null) {
//////                if (current3.getIdChain() == null) {
//////                    if (current2.getIdGroup() == null) {
//////                        box.setModel(new ListModelList(dao.findTerminalsEntities()));
//////                    } else {
//////                        box.setModel(new ListModelList(dao.findOnlyTerminalsForGroups(true, -1, -1, current2.getIdGroup())));
//////                    }
//////                } else {
//////                    box.setModel(new ListModelList(dao.findOnlyTerminalsForGroupsChains(true, -1, -1, current2.getIdGroup(), current3.getIdChain())));
//////                }
//////            } else {
//////                box.setModel(new ListModelList(dao.findOnlyTerminalsForGroupsChainsStores(true, -1, -1, current2.getIdGroup(), current3.getIdChain(), current4.getIdStore())));
//////            }
//////        } else {
//////            box.setModel(new ListModelList(dao.findOnlyTerminalsForGroupsChainsStoresDepartments(true, -1, -1, current2.getIdGroup(), current3.getIdChain(), current4.getIdStore(), current5.getIdDepartment())));
//////        }// </editor-fold>
//         
//    }
// </editor-fold>

    //--------------- Paginación INI ---------------
    
    public void redrawActual() {
        int pgno = pagTerminales.getActivePage();
        int ofs = pgno * pagTerminales.getPageSize();
        redraw(ofs, pagTerminales.getPageSize(), true);
    }

    //@SuppressWarnings("unchecked")
    public void addPaginador() {
        Paging pag = pagTerminales;
        final int PAGE_SIZE = pag.getPageSize();

        // Show Listbox with first PAGE_SIZE
        //System.out.println("  1.- addPaginador...");
        ////long startTime = System.currentTimeMillis();
        redraw(0, PAGE_SIZE, true);
        //System.out.println("  2.- addPaginador...tardamos: " + com.tpvs.util.TimeMeter.getTiempoTranscurrido(startTime) + " ---\n");


        pag.addEventListener("onPaging", (EventListener) new EventListener() {
            @Override
            public void onEvent(Event event) {
                //System.out.println("  estoy en: pag onEvent ");
                PagingEvent pe = (PagingEvent) event;
                int pgno = pe.getActivePage();
                int ofs = pgno * PAGE_SIZE;
                // Redraw current paging
                redraw(ofs, PAGE_SIZE, true);
            }
        });
    }


    /**
     * Método de apoyo para corregir bug en el que se mostraba una columna menos
     * en el listbox al momento de repintarlo.
     * @param firstResult indice del primer registro a mostrar en esta página.
     * @param maxResults max numero de resultado a llenar en esta página.
     * @param isPaging indica si el redraw viene de un Evt de paginación para
     * indicar que se debe o no corregir las columnas mostradas.
     */
    private void redraw(int firstResult, int maxResults) {
        redraw(firstResult, maxResults, false);
    }


    @SuppressWarnings("unchecked")
    private void redraw(int firstResult, int maxResults, boolean isPaging){
        //primero limpiamos selección del listbox...
        box.setSelectedItem(null);
        box.setSelectedIndex(-1);
        imgImgTerminalModel.setSrc(null);

        if (firstResult < 1) { // si hubo nueva busqueda por ejemplo...
//            System.out.println(" - en redraw firstResult<1 ...hacemos P.activa=Pag.0");
            pagTerminales.setActivePage(0);
        }

// <editor-fold defaultstate="collapsed" desc="comparaciones de combos...">
//        System.out.println(" En redraw(firstResult[" + firstResult + "], maxResults[" + maxResults + "], PAGE_SIZE[" + pagTerminales.getPageSize() + "]) ");
        box.getItems().clear();

        ////List<Docente> list = dao.findDocenteEntities(firstResult, maxResults); //params al revés
        List<Terminals> lstTerminals;
        
        List<Groups> lstTmpGroups = new ArrayList<>();
        if (current2.getIdGroup() == null) {
            lstTmpGroups = new ArrayList(lstMyGroups);
        } else {
            lstTmpGroups.add(current2);
        }

        pagTerminales.setTotalSize(dao.getTerminalsCount(lstTmpGroups, current3.getIdChain() != null ? current3.getIdChain() : 0,
                current4.getIdStore()!=null?current4.getIdStore():0, current5.getIdDepartment()!=null?current5.getIdDepartment():0, 
                textBoxQryTerminal.getValue(), textBoxFolioTerminal.getValue(), mySessionUser.getIdProveedor()!=null?mySessionUser.getIdProveedor().getIdProveedor():0,
                txtBoxAfiliacion.getValue(), txtTerminalId.getValue()));
        
        lstTerminals = dao.findByIdsWithTerminalId(false, maxResults, firstResult, lstTmpGroups, current3.getIdChain()!=null?current3.getIdChain():0,
                current4.getIdStore()!=null?current4.getIdStore():0, current5.getIdDepartment()!=null?current5.getIdDepartment():0, 
                textBoxQryTerminal.getValue(), textBoxFolioTerminal.getValue(), mySessionUser.getIdProveedor()!=null?mySessionUser.getIdProveedor().getIdProveedor():0,
                txtBoxAfiliacion.getValue(), txtTerminalId.getValue());
        
//        if (!(textBoxQryTerminal.getValue().isEmpty())) { //si tiene algo en txtbox serial...
//            System.out.println(" --- 1 --- maxResults[" + maxResults + "], firstResult[" + firstResult + "] total size[" + pagTerminales.getTotalSize() + "]---\n");
//            pagTerminales.setTotalSize(dao.getTerminalsLikeIdTerminalCount(textBoxQryTerminal.getValue()));
//            lstTerminals = dao.findTerminalsLikeIdTerminal(false, maxResults, firstResult, textBoxQryTerminal.getValue());
//        } // si filtro es x grupo...
//        else if ((current2.getIdGroup() != null) && (current3.getIdChain() == null)) { // si filtro es x grupo (y combo cadena vacío)...
//            System.out.println("  redraw 1a, vamos por findOnlyTerminalsForGroups del grupo[" + current2.getIdGroup() + "]. ");
//            pagTerminales.setTotalSize(dao.getTerminalsForGroupsCount(current2.getIdGroup().longValue()));
//            lstTerminals = dao.findOnlyTerminalsForGroups(false, maxResults, firstResult, current2.getIdGroup()); //dao.findTerminalsEntities(maxResults, firstResult);
//            System.out.println("  redraw 2a, obtuvimos [" + lstTerminals.size() + "] tuplas. ");
//        } // si filtro es x cadena Y TIENDA...
//        else if ((current3.getIdChain() != null) && (current4.getIdStore() != null) && (current5.getIdDepartment() == null)) {
//            System.out.println("  redraw 1b, vamos por findOnlyTerminalsForGroupsChainsStores del grupo[" + current2.getIdGroup() + "] y cadena[" + current3.getIdChain() + "] y tienda[" + current4.getIdStore() + "]. ");
//            pagTerminales.setTotalSize(dao.getTerminalsForGroupsChainsStoresCount(current2.getIdGroup().longValue(), current3.getIdChain().longValue(), current4.getIdStore().longValue()));
//            lstTerminals = dao.findOnlyTerminalsForGroupsChainsStores(false, maxResults, firstResult, current2.getIdGroup(), current3.getIdChain(), current4.getIdStore());
//            System.out.println("  redraw 2b, obtuvimos [" + lstTerminals.size() + "] tuplas. ");
//        } // si filtro es x TIENDA y DEPARTAMENTO...
//        else if ((current3.getIdChain() != null) && (current4.getIdStore() != null) && (current5.getIdDepartment() != null)) {
//            System.out.println("  redraw 1c, vamos por findOnlyTerminalsForGroupsChainsStores del grupo[" + current2.getIdGroup() + "] y cadena[" + current3.getIdChain() + "] y tienda[" + current4.getIdStore() + "] y departamento[" + current5.getIdDepartment() + "]. ");
//            pagTerminales.setTotalSize(dao.getTerminalsForGroupsChainsStoresDepartmentsCount(current2.getIdGroup().longValue(), current3.getIdChain().longValue(), current4.getIdStore().longValue(), current5.getIdDepartment().longValue()));
//            lstTerminals = dao.findOnlyTerminalsForGroupsChainsStoresDepartments(false, maxResults, firstResult, current2.getIdGroup(), current3.getIdChain(), current4.getIdStore(), current5.getIdDepartment());
//            System.out.println("  redraw 2c, obtuvimos [" + lstTerminals.size() + "] tuplas. ");
//        } // si filtro es x gpo Y cadena...
//        else if (current3.getIdChain() != null) {
//            System.out.println("  redraw 1d, vamos por findOnlyTerminalsForGroupsChains del grupo[" + current2.getIdGroup() + "] y cadena[" + current3.getIdChain() + "]. ");
//            pagTerminales.setTotalSize(dao.getTerminalsForGroupsChainsCount(current2.getIdGroup().longValue(), current3.getIdChain().longValue()));
//            lstTerminals = dao.findOnlyTerminalsForGroupsChains(false, maxResults, firstResult, current2.getIdGroup(), current3.getIdChain());
//            System.out.println("  redraw 2d, obtuvimos [" + lstTerminals.size() + "] tuplas. ");
//        } // si no hay filtro (onclick buscar todo)...
//        else {
//            System.out.println(" --- 2 --- maxResults[" + maxResults + "], firstResult[" + firstResult + "]");
//            pagTerminales.setTotalSize(dao.getTerminalsCount());
//            //-- MLA -- 
//            System.out.println(" pagTerminales.getPageSize(): " + pagTerminales.getPageSize());
//            lstTerminals = dao.findTerminalsEntities(maxResults, firstResult);
//        }
// </editor-fold>
        Datebox dtb;

// <editor-fold defaultstate="collapsed" desc="pintado de celdas...">
//        System.out.println(this.getClass().getName() + " pintando celdas en listbox...");
        
        DepartmentsvariablesJpaController daoDeptoVars = new DepartmentsvariablesJpaController();
        Departmentsvariables myDeptoVars;
        String stTID;
        
        for (Terminals term : lstTerminals) {
            Listitem li = new Listitem();

            li.appendChild(new Listcell(term.getIdTerminal()));
            li.appendChild(new Listcell(term.getModel()));
            //si viene directo del onclick de búsqueda, re-agregamos esta columna...
            if (!isPaging) {
//                System.out.println("  - como !isPaging ...re-agregamos esta columna de term.getModel()");
                li.appendChild(new Listcell(term.getModel()));
            }

            li.appendChild(new Listcell(term.getMerchantID()));
            li.appendChild(new Listcell(term.getBrowserLic()));

            dtb = new Datebox(term.getAddDate());
            dtb.setFormat("dd/MM/yyyy");
            dtb.getText();
            li.appendChild(new Listcell(dtb.getText()));

            dtb = new Datebox(term.getLastCommDate());
            dtb.setFormat("dd/MM/yyyy");
            dtb.getText();
            li.appendChild(new Listcell(dtb.getText()));

            li.appendChild(new Listcell(term.getFolio()));
            
            stTID = "";
            myDeptoVars = daoDeptoVars.findDepartmentsvariablesByIdName(term.getIdDepartment().getIdDepartment(), "#TID[[bd_noafiliacion]]");
            
            if(myDeptoVars != null) {
                stTID = myDeptoVars.getValue();
            }
            
            li.appendChild(new Listcell(stTID));

            li.setValue(term);
            box.appendChild(li);
        }
// </editor-fold>

    }
    
    public void onSelect$boxStores(Event event) {
        bbStores.close();
        bbStores.setValue(current4.getStore());
    }
    
    public void onSelect$comboboxGroups(Event event) {
        checkLastReporte();
    }
    
    public void onSelect$comboboxChains(Event event) {
        redrawActualStores();
    }
    
    public void onClick$bttnBuscarStore(Event event) {
        redrawStores(0, pagBoxDataStores.getPageSize(), true);
    }
    
    public void redrawActualStores() {
        int pgno = pagBoxDataStores.getActivePage();
        int ofs = pgno * pagBoxDataStores.getPageSize();
        redrawStores(ofs, pagBoxDataStores.getPageSize(), true);
    }
    
    public void addPaginadorStores() {
        Paging pagStores = pagBoxDataStores;
        final int PAGE_SIZE = pagStores.getPageSize();
        redrawStores(0, PAGE_SIZE, true);
        
        pagStores.addEventListener("onPaging", (EventListener) new EventListener() {
            @Override
            public void onEvent(Event event) {
                //System.out.println("  estoy en: pag onEvent ");
                PagingEvent pe = (PagingEvent) event;
                int pgno = pe.getActivePage();
                int ofs = pgno * PAGE_SIZE;
                // Redraw current paging
                redrawStores(ofs, PAGE_SIZE, true);
            }
        });
    }
    
    @SuppressWarnings("unchecked")
    private void redrawStores(int firstResult, int maxResults, boolean isPaging) {
        //primero limpiamos selección del listbox...
        boxStores.setSelectedItem(null);
        boxStores.setSelectedIndex(-1);
        boxStores.getItems().clear();
        
        Stores storeAll = new Stores();
        storeAll.setStore(Labels.getLabel("lblTodos"));
        storeAll.setContact(Labels.getLabel("lblTodosTiendas"));
        storeAll.setIdStore(null);
        storeAll.setIdChain(null);
        
        current4 = storeAll;
        
        if(current3.getIdChain() == null) {
            pagBoxDataStores.setTotalSize(1);
            Listitem li = new Listitem();
            li.appendChild(new Listcell(storeAll.getStore()));
            li.appendChild(new Listcell(storeAll.getRegFedCon()));
            li.setValue(storeAll);
            boxStores.appendChild(li);
            bbStores.setValue(current4.getStore());
            return;
        }

        if (firstResult < 1) { // si hubo nueva busqueda por ejemplo...
            pagBoxDataStores.setActivePage(0);
        }

// <editor-fold defaultstate="collapsed" desc="comparaciones de combos...">
        

        ////List<Docente> list = dao.findDocenteEntities(firstResult, maxResults); //params al revés
        List<Stores> myList;
        
        pagBoxDataStores.setTotalSize(dao4.getCountByIds(mySessionUser.getGroupsList(), current3.getIdChain()!=null?current3.getIdChain():0,
                Long.MIN_VALUE, textBoxBuscarStore.getValue(), ""));
        
        myList = dao4.findByIds(false, maxResults-1, firstResult, mySessionUser.getGroupsList(), current3.getIdChain()!=null?current3.getIdChain():0,
                Long.MIN_VALUE, textBoxBuscarStore.getValue(), "");
        
//        if(myList==null || myList.isEmpty())
//            return;
        
        if(myList == null) {
            myList = new ArrayList<>();
        }
        
        pagBoxDataStores.setTotalSize(pagBoxDataStores.getTotalSize());
        myList.add(0, storeAll);
        
// </editor-fold>

// <editor-fold defaultstate="collapsed" desc="pintado de celdas...">

        for (Stores myElement : myList) {
            Listitem li = new Listitem();
            
            li.appendChild(new Listcell(myElement.getStore()));
//            li.appendChild(new Listcell(String.valueOf(myElement.getIdDepartment())));
            li.appendChild(new Listcell(myElement.getRegFedCon()));

            li.setValue(myElement);
            boxStores.appendChild(li);
        }
// </editor-fold>

    }

    //--------------- Paginación FIN ---------------
    
    private void voAlmacenarRamalSession() {
        Sessions.getCurrent().setAttribute("group", current2.getIdGroup()==null?current.getIdDepartment().getIdStore().getIdChain().getIdGroup():current2);
        Sessions.getCurrent().setAttribute("chain", current3.getIdChain()==null?current.getIdDepartment().getIdStore().getIdChain():current3);
        Sessions.getCurrent().setAttribute("store", current4.getIdStore()==null?current.getIdDepartment().getIdStore():current4);
        Sessions.getCurrent().setAttribute("department", current5.getIdDepartment()==null?current.getIdDepartment():current5);
        Sessions.getCurrent().setAttribute("terminal", current!=null?current:null);
    }
}

class rprtTerminalsThread extends Thread {

    ServletContext sc;
    SimpleDateFormat sdfFormato = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    long idGroup, idChain;
    long startTime = System.currentTimeMillis();
    
    List<Groups> lstTmpGroups;
    Groups currentGroup = null;
    Chains currentChain = null;
    Stores currentStore = null;
    Departments currentDepartment = null;
    Users mySessionUser;
    
    TerminalsJpaController daoTerm = new TerminalsJpaController();

//    String stNameVarsTerm, stNameVarsDepto;
    public rprtTerminalsThread(ServletContext sc, List<Groups> lstTmpGroups, Groups currentGroup, Chains currentChain, Stores currentStore, Departments currentDepartment, 
            Users mySessionUser) {
        this.sc = sc;
        this.lstTmpGroups = lstTmpGroups;
        this.currentGroup = currentGroup;
        this.currentChain = currentChain;
        this.currentStore = currentStore;
        this.currentDepartment = currentDepartment;
        this.mySessionUser = mySessionUser;
    }

    @Override
    public void run() {
        sc.setAttribute("rprtTerminals" + currentGroup.getGroupName(), true);
        sc.setAttribute("rprtTerminals" + currentGroup.getGroupName() + "TimeStampInicio", Calendar.getInstance());
        sc.setAttribute("rprtTerminals" + currentGroup.getGroupName() + "TiempoTranscurrido", "00:00:00");

        startTime = System.currentTimeMillis();

        runProcess();
    }

    void runProcess() {

        com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerProcSist"), "INFO",
                "*** clase " + Thread.currentThread().getStackTrace()[1].getClassName()
                + " línea " + Thread.currentThread().getStackTrace()[1].getLineNumber()
                + " Tiempo: " + TimeMeter.getTiempoTranscurrido(startTime));
        
        int inTotalRegistros = daoTerm.getTerminalsCount(lstTmpGroups, currentChain.getIdChain() != null ? currentChain.getIdChain() : 0,
                currentStore.getIdStore()!=null?currentStore.getIdStore():0, currentDepartment.getIdDepartment()!=null?currentDepartment.getIdDepartment():0, 
                "", "", mySessionUser.getIdProveedor()!=null?mySessionUser.getIdProveedor().getIdProveedor():0, "", "");

        com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerProcSist"), "INFO",
                "*** clase " + Thread.currentThread().getStackTrace()[1].getClassName()
                + " línea " + Thread.currentThread().getStackTrace()[1].getLineNumber()
                + " Tiempo: " + TimeMeter.getTiempoTranscurrido(startTime));

        if (inTotalRegistros <= 0) {
            com.tpvs.util.LogApp.addLogSistema(com.tpvs.util.MyProperties.getPropiedad("stLoggerProcSist"), "INFO",
                                "NO hubo registros para generación de reporte de variables de configuración.");
            
            sc.setAttribute("rprtTerminals" + currentGroup.getGroupName(), false);
            sc.setAttribute("rprtTerminals" + currentGroup.getGroupName() + "TimeStampInicio", Calendar.getInstance());
            sc.setAttribute("rprtTerminals" + currentGroup.getGroupName() + "TiempoTranscurrido", TimeMeter.getTiempoTranscurrido(startTime));
        } else {
            int capacidadArchivos = 10000;
            
            int totalArchivos = inTotalRegistros / capacidadArchivos + (inTotalRegistros % capacidadArchivos > 0 ? 1 : 0);

            String stDir = com.tpvs.util.AppControlGeneral.stRutaApp + MyProperties.getPropiedad("stDirToPutAdditionalFiles") + File.separator + "reportesTerminals" + File.separator;
            //External Control of File Name or Path (CWE ID 73)
            //MyProperties.setPropiedad("GroupName", currentGroup.getGroupName());
            String stNameFileDef = currentGroup.getGroupName() + new SimpleDateFormat("yyyyMMddHHmmss").format(Calendar.getInstance().getTime());
            //String stNameFileDef = MyProperties.getPropiedad("GroupName") + new SimpleDateFormat("yyyyMMddHHmmss").format(Calendar.getInstance().getTime());
            
            com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerProcSist"), "INFO",
                    "*** clase " + Thread.currentThread().getStackTrace()[1].getClassName()
                    + " línea " + Thread.currentThread().getStackTrace()[1].getLineNumber()
                    + " Tiempo: " + TimeMeter.getTiempoTranscurrido(startTime));
            
            Thread[] archivos = new Thread[totalArchivos];
            
            for (int i = 0; i < totalArchivos; i++) {
                int regInicial = i * capacidadArchivos;
                int regFinal = i * capacidadArchivos + capacidadArchivos - 1;
                regFinal = regFinal <= inTotalRegistros ? regFinal : inTotalRegistros - 1;

                com.tpvs.util.LogApp.addTraceToApp(com.tpvs.util.MyProperties.getPropiedad("stLoggerProcSist"), "INFO",
                        "*** clase " + Thread.currentThread().getStackTrace()[1].getClassName()
                        + " línea " + Thread.currentThread().getStackTrace()[1].getLineNumber()
                        + " Tiempo: " + TimeMeter.getTiempoTranscurrido(startTime));

                try {
                    String stNameOfFile = stNameFileDef + "-" + (i + 1) + ".xlsx";
                    new File(stDir).mkdirs();
                    new File(stDir + stNameOfFile).createNewFile();
                    
                    rprtTerminalsGenerarThread reporte = new rprtTerminalsGenerarThread(new File(stDir + stNameOfFile), inTotalRegistros, i, regInicial, capacidadArchivos,
                            lstTmpGroups, currentGroup, currentChain, currentStore, currentDepartment, mySessionUser);
                    
                    reporte.setName(stNameOfFile);
                    reporte.start();
                    archivos[i] = reporte;
                    boolean boEspera;
                    if((i>0 && i%2!=0) || (i+1)>=totalArchivos) {
                        do {
                            Thread.sleep(2000);
                            boEspera=false;
                            for(Thread archivo : archivos) {
                                if (archivo != null && archivo.isAlive()) {
                                    boEspera = true;
//                                    System.out.println("*** " + archivo.getName() + " -- vivo -- TimeStampInicio -- " + TimeMeter.getTiempoTranscurrido(startTime));
                                } else if (archivo != null) {
//                                    System.out.println("*** " + archivo.getName() + " -- finalizó -- TimeStampInicio -- " + TimeMeter.getTiempoTranscurrido(startTime));
                                }
                            }
                        } while (boEspera);
                    }
//                    System.out.println("*** Archivo .- " + stNameOfFile + " generado.");
//                    Thread.sleep(150);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(RprtVariablesConfController.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(RprtVariablesConfController.class.getName()).log(Level.SEVERE, null, ex);
//                } catch (DRException ex) {
//                    Logger.getLogger(rprtTerminalsThread.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InterruptedException ex) {
                    Logger.getLogger(rprtTerminalsThread.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
//                    sc.setAttribute("rprtTerminals" + currentGroup.getGroupName(), false);
                    sc.setAttribute("rprtTerminals" + currentGroup.getGroupName() + "TimeStampInicio", Calendar.getInstance());
                    sc.setAttribute("rprtTerminals" + currentGroup.getGroupName() + "TiempoTranscurrido", TimeMeter.getTiempoTranscurrido(startTime));
                }
            }
            
            com.tpvs.util.LogApp.addLogSistema(com.tpvs.util.MyProperties.getPropiedad("stLoggerProcSist"), "INFO",
                    "Empacamos archivos y enviamos correo.");

            if (zipTheFiles(stDir, stNameFileDef, totalArchivos)) {
                if(Math.round(Math.ceil(new File(stDir + stNameFileDef + ".zip").length()/1024.0))>5120) {
//                    sendEmail(stCuentaEmail, null);
                } else {
//                    sendEmail(stCuentaEmail, new File(stDir + stNameFileDef + ".zip"));
                }
            }
            
            sc.setAttribute("rprtTerminals" + currentGroup.getGroupName(), false);
            sc.setAttribute("rprtTerminals" + currentGroup.getGroupName() + "TimeStampInicio", Calendar.getInstance());
            sc.setAttribute("rprtTerminals" + currentGroup.getGroupName() + "TiempoTranscurrido", TimeMeter.getTiempoTranscurrido(startTime));
            
            com.tpvs.util.LogApp.addLogSistema(com.tpvs.util.MyProperties.getPropiedad("stLoggerProcSist"), "INFO",
                    "Proceso finalizado.");
        }
    }
    
    private boolean zipTheFiles(String stDir, String stNameFileDef, int totalArchivos) {
        //External Control of File Name or Path (CWE ID 73)
        //MyProperties.setPropiedad("stDir", stDir);
        //MyProperties.setPropiedad("stNameFileDef", stNameFileDef);
        String zipFile = stDir + stNameFileDef + ".zip"; //"C:/archive.zip";
        //String zipFile =  MyProperties.getPropiedad("stDir") + MyProperties.getPropiedad("stNameFileDef") + ".zip"; //"C:/archive.zip";
        String[] srcFiles = new String[totalArchivos]; //{"C:/srcfile1.txt", "C:/srcfile2.txt", "C:/srcfile3.txt"};

        for (int i = 0; i < totalArchivos; i++) {
            srcFiles[i] = stDir + stNameFileDef + "-" + (i + 1) + ".xlsx";
        }

        try {
            // create byte buffer
            byte[] buffer = new byte[1024];
            FileOutputStream fos = new FileOutputStream(zipFile);
            try (ZipOutputStream zos = new ZipOutputStream(fos)) {
                for (String srcFile1 : srcFiles) {
                    File srcFile = new File(srcFile1);
                    // begin writing a new ZIP entry, positions the stream to the start of the entry data
                    try (FileInputStream fis = new FileInputStream(srcFile)) {
                        // begin writing a new ZIP entry, positions the stream to the start of the entry data
                        zos.putNextEntry(new ZipEntry(srcFile.getName()));
                        int length;
                        while ((length = fis.read(buffer)) > 0) {
                            zos.write(buffer, 0, length);
                        }
                        zos.closeEntry();
                    }
                }
                // close the ZipOutputStream
            }
            return true;
        } catch (IOException ioe) {
            System.out.println("Error creating zip file: " + ioe);
            return false;
        }
    }

    private void sendEmail(String stCuentaEmail, File fiResultado) {
        String from = com.tpvs.util.MyProperties.getPropiedad("mail_usr");
        String fromName = "TPVSadmin";
        String[] to = {stCuentaEmail};
        String[] ccTo = {};
        String[] bcc = {"josue.tinoco@tpvsolutions.com.mx"};
        String stSubject = "Reporte Variables de Configuración";
        //String usr = com.tpvs.util.MyProperties.getPropiedad("mail_usr");
        //String pwd = com.tpvs.util.MyProperties.getPropiedad("mail_pwd");
		String type = "Properties";						   
        String host = com.tpvs.util.MyProperties.getPropiedad("mail_host");
        String port = com.tpvs.util.MyProperties.getPropiedad("mail_port");
        boolean boTls = Boolean.parseBoolean(com.tpvs.util.MyProperties.getPropiedad("mail_tls"));
        boolean boAuth = Boolean.parseBoolean(com.tpvs.util.MyProperties.getPropiedad("mail_auth"));
        String stMensaje = "El proceso de Reporte de Variables de Configuración ha finalizado. "
                + "\nEn caso que por tamaño el archivo no fuese anexado al correo, puede recuperarlo "
                + "\nen el sistema en la misma opción que utilizó para generarlo. ";
        String stMensajeNota = "\n\nEste correo se genera automaticamente, favor de NO responder.";
        File fiSomeFile = fiResultado != null ? fiResultado : null;

        //sendMyEmail myEmail = new sendMyEmail(from, fromName, to, ccTo, bcc, stSubject, usr, pwd, host, port, boAuth, boTls,
		sendMyEmail myEmail = new sendMyEmail(from, fromName, to, ccTo, bcc, stSubject, type, 0, 0, host, port, boAuth, boTls,
                stMensaje + "\n\n" + stMensajeNota, fiSomeFile);
        myEmail.start();
    }
}

class rprtTerminalsGenerarThread extends Thread {
    File theFile;
    int inTotalRegistros=0, numFile=0, regInicial=0, capacidadArchivos=0;
    Long startTime;
    TerminalsJpaController daoTerm = new TerminalsJpaController();
    List<Groups> lstTmpGroups;
    Groups currentGroup;
    Chains currentChain;
    Stores currentStore;
    Departments currentDepartment;
    
    Users mySessionUser;
    
    public rprtTerminalsGenerarThread(File theFile, int inTotalRegistros, int numFile, int regInicial, int capacidadArchivos,
            List<Groups> lstTmpGroups, Groups currentGroup, Chains currentChain, Stores currentStore, Departments currentDepartment, Users mySessionUser) {
        this.theFile = theFile;
        this.inTotalRegistros = inTotalRegistros;
        this.numFile = numFile;
        this.regInicial = regInicial;
        this.capacidadArchivos = capacidadArchivos;
        this.lstTmpGroups = lstTmpGroups;
        this.currentGroup = currentGroup;
        this.currentChain = currentChain;
        this.currentStore = currentStore;
        this.currentDepartment = currentDepartment;
        this.mySessionUser = mySessionUser;
    }
    
    public  void run() {
        startTime = System.currentTimeMillis();
        executeProcess();
    }
    
    void executeProcess() {
        StyleBuilder boldStyle = stl.style().bold();
        StyleBuilder boldCenteredStyle = stl.style(boldStyle).setHorizontalAlignment(HorizontalAlignment.CENTER);
        StyleBuilder columnTitleStyle = stl.style(boldCenteredStyle)
                .setBorder(stl.pen1Point())
                .setBackgroundColor(Color.LIGHT_GRAY);
        StyleBuilder columnDataStyle = stl.style().setFontSize(8); //.setFontSize(6);
//
        int columns_count = 5; //stNameVarsDepto.split(",",-1).length + stNameVarsTerm.split(",",-1).length;
        TextColumnBuilder<String>[] columns = new TextColumnBuilder[columns_count];
        columns[0] = col.column(Labels.getLabel("Terminal"), "Terminal", type.stringType()).setStyle(columnDataStyle);
        columns[1] = col.column(Labels.getLabel("Modelo"), "Modelo", type.stringType()).setStyle(columnDataStyle);
        columns[2] = col.column(Labels.getLabel("Afiliacion"), "Afiliacion", type.stringType()).setStyle(columnDataStyle);
        columns[3] = col.column(Labels.getLabel("folio"), "Folio", type.stringType()).setStyle(columnDataStyle);
        columns[4] = col.column("Licencia Browser", "LicBrowser", type.stringType()).setStyle(columnDataStyle);
            
        try {
            //                JasperPdfExporterBuilder pdfExporter = export.pdfExporter(new File((stDir + stNameOfFile)));
            JasperXlsxExporterBuilder xlsxExporter = export.xlsxExporter(theFile)
                    .setDetectCellType(true)
                    .setIgnorePageMargins(true)
                    .setWhitePageBackground(false)
                    .setRemoveEmptySpaceBetweenColumns(true);
            
            report()            
                    //                        .setPageFormat(PageType.A3, PageOrientation.LANDSCAPE)
                    .ignorePageWidth()
                    .ignorePagination()
                    .setColumnTitleStyle(columnTitleStyle)
                    .highlightDetailEvenRows()
                    .columns(columns)
                    .title(cmp.text("Reporte de Configuración").setStyle(boldCenteredStyle))//shows report title
                    .pageFooter(cmp.pageXofY().setStyle(boldCenteredStyle))//shows number of page at page footer
                    .setDataSource(createDataSource(inTotalRegistros, numFile, regInicial, capacidadArchivos))//.setDataSource(dataSource)
                    .setVirtualizer(new JRFileVirtualizer(2))
                    //                        .toPdf(pdfExporter)
                    .toXlsx(xlsxExporter);

            //                Filedownload myFileDwnld = new Filedownload();
            //                File myFile = new File(stDir + stNameOfFile);
            //                myFileDwnld.save(myFile, "application/" + "PDF");
        } catch (DRException ex) {
            Logger.getLogger(rprtTerminalsThread.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private JRDataSource createDataSource(int inTotalRegistros, int numFile, int regInicial, int capacidadArchivos) {
        int inRegistrosAtendidos = numFile * capacidadArchivos, inPorcentajeImpreso;
        DRDataSource dataSource = null;

        List<Terminals> lstRegistros = daoTerm.findByIdsWithTerminalId(false, capacidadArchivos, regInicial, lstTmpGroups, currentChain.getIdChain()!=null?currentChain.getIdChain():0,
                    currentStore.getIdStore()!=null?currentStore.getIdStore():0, currentDepartment.getIdDepartment()!=null?currentDepartment.getIdDepartment():0, 
                    "", "", mySessionUser.getIdProveedor()!=null?mySessionUser.getIdProveedor().getIdProveedor():0, "", "");

        StyleBuilder boldStyle = stl.style().bold();
//        StyleBuilder boldCenteredStyle = stl.style(boldStyle).setHorizontalAlignment(HorizontalAlignment.CENTER);
//        StyleBuilder columnTitleStyle = stl.style(boldCenteredStyle)
//                .setBorder(stl.pen1Point())
//                .setBackgroundColor(Color.LIGHT_GRAY);
//        StyleBuilder columnDataStyle = stl.style().setFontSize(8); //.setFontSize(6);

        try {
            String[] columnsDS = new String[5];
            columnsDS[0] = "Terminal";
            columnsDS[1] = "Modelo";
            columnsDS[2] = "Afiliacion";
            columnsDS[3] = "Folio";
            columnsDS[4] = "LicBrowser";
            
            dataSource = new DRDataSource(columnsDS);

            inPorcentajeImpreso = ((int) ((double) inRegistrosAtendidos / (double) inTotalRegistros * 100));
            System.out.println("*** Inicio de datasource --> " + inRegistrosAtendidos + " -- " + inTotalRegistros + " -- "
                    + inPorcentajeImpreso + "% -- Tiempo: " + TimeMeter.getTiempoTranscurrido(startTime) + " -- "
                    + new SimpleDateFormat("dd/MMM/yyyy HH:mm:ss").format(Calendar.getInstance().getTime()));
            
            for(Terminals myTerm : lstRegistros) {
                Object[] row = new Object[5];

                row[0] = myTerm.getIdTerminal();
                row[1] = myTerm.getModel();
                row[2] = myTerm.getMerchantID();
                row[3] = myTerm.getFolio();
                row[4] = myTerm.getBrowserLic();

                dataSource.add(row);

                inRegistrosAtendidos++;

                inPorcentajeImpreso = ((int) ((double) inRegistrosAtendidos / (double) inTotalRegistros * 100));
                if (((int) ((double) inRegistrosAtendidos / (double) inTotalRegistros * 100)) % 5 == 0
                        && inPorcentajeImpreso != ((int) ((double) inRegistrosAtendidos / (double) inTotalRegistros * 100))) {
                    inPorcentajeImpreso = ((int) ((double) inRegistrosAtendidos / (double) inTotalRegistros * 100));
                    System.out.println("*** Avance --> " + inRegistrosAtendidos + " -- " + inTotalRegistros + " -- "
                            + inPorcentajeImpreso + "% -- Tiempo: " + TimeMeter.getTiempoTranscurrido(startTime) + " -- "
                            + new SimpleDateFormat("dd/MMM/yyyy HH:mm:ss").format(Calendar.getInstance().getTime()));
                }
                Thread.sleep(15);
            }

            inPorcentajeImpreso = ((int) ((double) inRegistrosAtendidos / (double) inTotalRegistros * 100));
            System.out.println("*** DataSource Generado --> " + inRegistrosAtendidos + " -- " + inTotalRegistros + " -- "
                    + inPorcentajeImpreso + "% -- Tiempo: " + TimeMeter.getTiempoTranscurrido(startTime) + " -- "
                    + new SimpleDateFormat("dd/MMM/yyyy HH:mm:ss").format(Calendar.getInstance().getTime()));
            
        } catch (InterruptedException ex) {
            Logger.getLogger(rprtTerminalsThread.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dataSource;
    }
}